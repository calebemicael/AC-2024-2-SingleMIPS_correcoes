$date
	Wed Apr  9 07:39:48 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module Simulacao $end
$var reg 1 ! clk $end
$var reg 1 " reset $end
$scope module datapath $end
$var wire 1 # and_result $end
$var wire 1 ! clock $end
$var wire 1 " reset $end
$var wire 1 $ zero $end
$var wire 4 % ula_regout [3:0] $end
$var wire 4 & ula_out [3:0] $end
$var wire 32 ' saidaMux5 [31:0] $end
$var wire 32 ( saidaMux4 [31:0] $end
$var wire 32 ) saidaMux3 [31:0] $end
$var wire 32 * saidaMux2 [31:0] $end
$var wire 1 + rw $end
$var wire 1 , regD $end
$var wire 32 - rdDM [31:0] $end
$var wire 32 . pc_mais_4 [31:0] $end
$var wire 32 / pc_incrementado [31:0] $end
$var wire 32 0 out_sl2 [31:0] $end
$var wire 1 1 mw $end
$var wire 1 2 mtreg $end
$var wire 1 3 mr $end
$var wire 1 4 jump $end
$var wire 32 5 inst [31:0] $end
$var wire 1 6 br $end
$var wire 1 7 beqzero $end
$var wire 1 8 asrc $end
$var wire 32 9 aluresult [31:0] $end
$var wire 2 : aluop [1:0] $end
$var wire 32 ; alubeqresult [31:0] $end
$var wire 5 < WRegister [4:0] $end
$var wire 32 = RData2 [31:0] $end
$var wire 32 > RData1 [31:0] $end
$var wire 32 ? ExtSignal [31:0] $end
$var reg 32 @ pc [31:0] $end
$scope module add4 $end
$var wire 32 A in [31:0] $end
$var wire 32 B out [31:0] $end
$upscope $end
$scope module alu1 $end
$var wire 1 $ Zero $end
$var wire 32 C B [31:0] $end
$var wire 4 D ALUOperation [3:0] $end
$var wire 32 E A [31:0] $end
$var reg 32 F ALUResult [31:0] $end
$upscope $end
$scope module aluBEQ $end
$var wire 32 G A [31:0] $end
$var wire 4 H ALUOperation [3:0] $end
$var wire 1 7 Zero $end
$var wire 32 I B [31:0] $end
$var reg 32 J ALUResult [31:0] $end
$upscope $end
$scope module controle $end
$var wire 6 K OP [5:0] $end
$var wire 1 + RegWrite $end
$var wire 1 , RegDist $end
$var wire 1 2 MemtoReg $end
$var wire 1 1 MemWrite $end
$var wire 1 3 MemRead $end
$var wire 1 4 Jump $end
$var wire 1 6 Branch $end
$var wire 1 8 ALUSrc $end
$var wire 2 L ALUOp [1:0] $end
$upscope $end
$scope module controlealu $end
$var wire 2 M ALUOperation [1:0] $end
$var wire 6 N funct [5:0] $end
$var wire 4 O out [3:0] $end
$var reg 4 P regout [3:0] $end
$upscope $end
$scope module datamemory $end
$var wire 1 3 MemRead $end
$var wire 1 1 MemWrite $end
$var wire 32 Q address [31:0] $end
$var wire 1 ! clk $end
$var wire 32 R writeData [31:0] $end
$var wire 32 S readData [31:0] $end
$var integer 32 T i [31:0] $end
$upscope $end
$scope module memoriadeinstrucoes $end
$var wire 32 U addr [31:0] $end
$var wire 32 V instrucao [31:0] $end
$var integer 32 W i [31:0] $end
$upscope $end
$scope module mux1 $end
$var wire 5 X A [4:0] $end
$var wire 5 Y B [4:0] $end
$var wire 1 , S $end
$var wire 5 Z X [4:0] $end
$upscope $end
$scope module mux2 $end
$var wire 1 8 S $end
$var wire 32 [ X [31:0] $end
$var wire 32 \ B [31:0] $end
$var wire 32 ] A [31:0] $end
$upscope $end
$scope module mux3 $end
$var wire 32 ^ A [31:0] $end
$var wire 32 _ B [31:0] $end
$var wire 1 2 S $end
$var wire 32 ` X [31:0] $end
$upscope $end
$scope module mux4 $end
$var wire 32 a A [31:0] $end
$var wire 32 b B [31:0] $end
$var wire 1 # S $end
$var wire 32 c X [31:0] $end
$upscope $end
$scope module mux5 $end
$var wire 32 d A [31:0] $end
$var wire 1 4 S $end
$var wire 32 e X [31:0] $end
$var wire 32 f B [31:0] $end
$upscope $end
$scope module registradores $end
$var wire 32 g ReadData1 [31:0] $end
$var wire 32 h ReadData2 [31:0] $end
$var wire 5 i ReadRegister1 [4:0] $end
$var wire 5 j ReadRegister2 [4:0] $end
$var wire 1 + RegWrite $end
$var wire 32 k WriteData [31:0] $end
$var wire 5 l WriteRegister [4:0] $end
$var wire 1 ! clock $end
$var wire 1 " reset $end
$var integer 32 m i [31:0] $end
$upscope $end
$scope module signalextend $end
$var wire 16 n in [15:0] $end
$var wire 32 o out [31:0] $end
$upscope $end
$scope module sl2 $end
$var wire 32 p in [31:0] $end
$var wire 32 q out [31:0] $end
$upscope $end
$scope module sl2_superior $end
$var wire 26 r in [25:0] $end
$var wire 4 s pc_mais_4 [3:0] $end
$var wire 32 t out [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
bx00 t
bx s
bx r
bx00 q
bx p
bx o
bx n
b100000 m
bx l
bx k
bx j
bx i
bx h
bx g
bx00 f
bx e
bx d
bx c
bx b
bx a
bx `
bx _
bx ^
bx ]
bx \
bx [
bx Z
bx Y
bx X
b100000000 W
bx V
bx U
b100000000 T
bx S
bx R
bx Q
b0 P
b0 O
bx N
bx M
bx L
bx K
bx J
bx00 I
b10 H
bx G
bx F
bx E
b0 D
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
x8
x7
x6
bx 5
x4
x3
x2
x1
bx00 0
bx /
bx00 .
bx -
x,
x+
bx *
bx )
bx (
bx '
b0 &
b0 %
x$
x#
0"
0!
$end
#10
b0 )
b0 `
b0 k
07
0,
02
b100 (
b100 c
b100 d
b10100 ;
b10100 J
b10100 b
08
0+
b0 -
b0 S
b0 _
0#
b10000 '
b10000 e
1$
03
01
06
14
b10 &
b10 D
b10 O
b10 %
b10 P
b10000 0
b10000 I
b10000 q
b0 *
b0 C
b0 [
b0 9
b0 F
b0 Q
b0 ^
b0 <
b0 Z
b0 l
b0 :
b0 L
b0 M
b100 r
b100 N
b100 ?
b100 \
b100 o
b100 p
b100 n
b0 =
b0 R
b0 ]
b0 h
b0 j
b0 >
b0 E
b0 g
b0 i
b0 Y
b0 X
b10 K
b10000 .
b10000 f
b10000 t
b0 s
b1000000000000000000000000100 5
b1000000000000000000000000100 V
b100 /
b100 B
b100 G
b100 a
b0 @
b0 A
b0 U
1"
1!
#20
0!
#30
04
b1000 '
b1000 e
b10100 0
b10100 I
b10100 q
b1 <
b1 Z
b1 l
b1000000000000010100 .
b1000000000000010100 f
b1000000000000010100 t
b10000000000000101 r
b101 N
b101 ?
b101 \
b101 o
b101 p
b101 n
b1 j
b1 X
b1000 K
b1000 (
b1000 c
b1000 d
b11100 ;
b11100 J
b11100 b
b100000000000010000000000000101 5
b100000000000010000000000000101 V
b1000 /
b1000 B
b1000 G
b1000 a
b100 @
b100 A
b100 U
1!
0"
#40
0!
#50
0$
b100 9
b100 F
b100 Q
b100 ^
b100 *
b100 C
b100 [
18
1+
12
13
b10000 0
b10000 I
b10000 q
b11 <
b11 Z
b11 l
b1100 '
b1100 e
b11000000000000010000 .
b11000000000000010000 f
b11000000000000010000 t
b110000000000000100 r
b100 N
b100 ?
b100 \
b100 o
b100 p
b100 n
b11 j
b11 X
b100011 K
b1100 (
b1100 c
b1100 d
b11100 ;
b11100 J
b11100 b
b10001100000000110000000000000100 5
b10001100000000110000000000000100 V
b1100 /
b1100 B
b1100 G
b1100 a
b1000 @
b1000 A
b1000 U
1!
#60
0!
#70
b0xx <
b0xx Z
b0xx l
x,
b0x000 )
b0x000 `
b0x000 k
0+
b1000 9
b1000 F
b1000 Q
b1000 ^
x2
03
11
b100000 0
b100000 I
b100000 q
b1000 *
b1000 C
b1000 [
b10000 '
b10000 e
b11000000000000100000 .
b11000000000000100000 f
b11000000000000100000 t
b110000000000001000 r
b1000 N
b1000 ?
b1000 \
b1000 o
b1000 p
b1000 n
b101011 K
b10000 (
b10000 c
b10000 d
b110000 ;
b110000 J
b110000 b
b10101100000000110000000000001000 5
b10101100000000110000000000001000 V
b10000 /
b10000 B
b10000 G
b10000 a
b1100 @
b1100 A
b1100 U
1!
#80
0!
#90
1#
1$
b0 )
b0 `
b0 k
08
b110 &
b110 D
b110 O
b110 %
b110 P
b0 9
b0 F
b0 Q
b0 ^
01
16
b1 :
b1 L
b1 M
b1000 0
b1000 I
b1000 q
b0 *
b0 C
b0 [
b0x0 <
b0x0 Z
b0x0 l
b11100 '
b11100 e
b100010000000000000001000 .
b100010000000000000001000 f
b100010000000000000001000 t
b1000100000000000000010 r
b10 N
b10 ?
b10 \
b10 o
b10 p
b10 n
b10 j
b1 i
b10 X
b100 K
b11100 (
b11100 c
b11100 d
b11100 ;
b11100 J
b11100 b
b10000001000100000000000000010 5
b10000001000100000000000000010 V
b10100 /
b10100 B
b10100 G
b10100 a
b10000 @
b10000 A
b10000 U
1!
#100
0!
#110
02
1+
0#
1,
06
b11000 '
b11000 e
b10 &
b10 D
b10 O
b10 %
b10 P
b0 0
b0 I
b0 q
b0 <
b0 Z
b0 l
b10 :
b10 L
b10 M
b11000 (
b11000 c
b11000 d
b0 .
b0 f
b0 t
b0 r
b0 N
b0 ?
b0 \
b0 o
b0 p
b0 n
b0 j
b0 i
b0 X
b0 K
b11000 ;
b11000 J
b11000 b
b0 5
b0 V
b11000 /
b11000 B
b11000 G
b11000 a
b10100 @
b10100 A
b10100 U
1!
#120
0!
#130
b11100 '
b11100 e
b11100 (
b11100 c
b11100 d
b11100 ;
b11100 J
b11100 b
b11100 /
b11100 B
b11100 G
b11100 a
b11000 @
b11000 A
b11000 U
1!
