$date
	Sun Apr  6 12:08:17 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb $end
$var reg 1 ! clk $end
$var reg 1 " reset $end
$scope module uut $end
$var wire 1 ! clk $end
$var wire 1 # pc_src $end
$var wire 1 " reset $end
$var wire 1 $ zero_flag $end
$var wire 5 % write_reg [4:0] $end
$var wire 32 & write_back_data [31:0] $end
$var wire 32 ' sign_ext_imm [31:0] $end
$var wire 1 ( reg_write $end
$var wire 1 ) reg_dst $end
$var wire 32 * reg_data2 [31:0] $end
$var wire 32 + reg_data1 [31:0] $end
$var wire 32 , pc_plus4 [31:0] $end
$var wire 32 - pc_next [31:0] $end
$var wire 32 . pc_jump [31:0] $end
$var wire 32 / pc_current [31:0] $end
$var wire 32 0 pc_branch [31:0] $end
$var wire 1 1 mem_write $end
$var wire 1 2 mem_to_reg $end
$var wire 32 3 mem_read_data [31:0] $end
$var wire 1 4 mem_read $end
$var wire 32 5 jump_address [31:0] $end
$var wire 1 6 jump $end
$var wire 32 7 instr [31:0] $end
$var wire 1 8 branch $end
$var wire 32 9 alu_src_b [31:0] $end
$var wire 1 : alu_src $end
$var wire 32 ; alu_result [31:0] $end
$var wire 2 < alu_op [1:0] $end
$var wire 3 = alu_control_signal [2:0] $end
$scope module alu_ctrl $end
$var wire 6 > funct [5:0] $end
$var wire 2 ? alu_op [1:0] $end
$var reg 3 @ alu_control_signal [2:0] $end
$upscope $end
$scope module alu_src_mux $end
$var wire 1 : sel $end
$var wire 32 A out [31:0] $end
$var wire 32 B in1 [31:0] $end
$var wire 32 C in0 [31:0] $end
$var parameter 32 D WIDTH $end
$upscope $end
$scope module arithmetic_logic_unit $end
$var wire 3 E alu_control [2:0] $end
$var wire 32 F b [31:0] $end
$var wire 1 $ zero $end
$var wire 32 G a [31:0] $end
$var reg 32 H result [31:0] $end
$upscope $end
$scope module branch_adder $end
$var wire 32 I b [31:0] $end
$var wire 32 J out [31:0] $end
$var wire 32 K a [31:0] $end
$upscope $end
$scope module branch_mux $end
$var wire 32 L in1 [31:0] $end
$var wire 1 # sel $end
$var wire 32 M out [31:0] $end
$var wire 32 N in0 [31:0] $end
$var parameter 32 O WIDTH $end
$upscope $end
$scope module control_unit $end
$var wire 6 P opcode [5:0] $end
$var reg 2 Q alu_op [1:0] $end
$var reg 1 : alu_src $end
$var reg 1 8 branch $end
$var reg 1 6 jump $end
$var reg 1 4 mem_read $end
$var reg 1 2 mem_to_reg $end
$var reg 1 1 mem_write $end
$var reg 1 ) reg_dst $end
$var reg 1 ( reg_write $end
$upscope $end
$scope module data_memory $end
$var wire 32 R addr [31:0] $end
$var wire 1 ! clk $end
$var wire 1 1 mem_write $end
$var wire 32 S read_data [31:0] $end
$var wire 32 T write_data [31:0] $end
$upscope $end
$scope module instruction_memory $end
$var wire 32 U instr [31:0] $end
$var wire 32 V addr [31:0] $end
$upscope $end
$scope module jump_mux $end
$var wire 32 W in0 [31:0] $end
$var wire 1 6 sel $end
$var wire 32 X out [31:0] $end
$var wire 32 Y in1 [31:0] $end
$var parameter 32 Z WIDTH $end
$upscope $end
$scope module jump_shift $end
$var wire 26 [ address [25:0] $end
$var wire 32 \ pc_plus_4 [31:0] $end
$var wire 32 ] jump_address [31:0] $end
$upscope $end
$scope module mem_to_reg_mux $end
$var wire 32 ^ in0 [31:0] $end
$var wire 32 _ in1 [31:0] $end
$var wire 1 2 sel $end
$var wire 32 ` out [31:0] $end
$var parameter 32 a WIDTH $end
$upscope $end
$scope module pc_plus4_adder $end
$var wire 32 b b [31:0] $end
$var wire 32 c out [31:0] $end
$var wire 32 d a [31:0] $end
$upscope $end
$scope module program_counter $end
$var wire 1 ! clk $end
$var wire 32 e next_pc [31:0] $end
$var wire 1 " reset $end
$var reg 32 f current_pc [31:0] $end
$upscope $end
$scope module reg_dst_mux $end
$var wire 5 g in0 [4:0] $end
$var wire 5 h in1 [4:0] $end
$var wire 1 ) sel $end
$var wire 5 i out [4:0] $end
$var parameter 32 j WIDTH $end
$upscope $end
$scope module register_file $end
$var wire 1 ! clk $end
$var wire 32 k read_data1 [31:0] $end
$var wire 32 l read_data2 [31:0] $end
$var wire 5 m read_reg1 [4:0] $end
$var wire 5 n read_reg2 [4:0] $end
$var wire 1 ( reg_write $end
$var wire 32 o write_data [31:0] $end
$var wire 5 p write_reg [4:0] $end
$upscope $end
$scope module sign_extension $end
$var wire 16 q imm [15:0] $end
$var wire 32 r ext_imm [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b101 j
b100000 a
b100000 Z
b100000 O
b100000 D
$end
#0
$dumpvars
b101 r
b101 q
b1000 p
bx o
b1000 n
b0 m
bx l
b0 k
b1000 i
b0 h
b1000 g
b0 f
b100 e
b0 d
b100 c
b100 b
bx `
bx _
bx ^
b1000000000000000010100 ]
b100 \
b10000000000000000101 [
b1000000000000000010100 Y
b100 X
b100 W
b0 V
b100000000010000000000000000101 U
bx T
bx S
bx R
b0 Q
b1000 P
b100 N
b100 M
b11000 L
b100 K
b11000 J
b10100 I
bx H
b0 G
bx F
b10 E
bx C
b101 B
bx A
b10 @
b0 ?
b101 >
b10 =
b0 <
bx ;
0:
bx 9
08
b100000000010000000000000000101 7
06
b1000000000000000010100 5
04
bx 3
02
01
b11000 0
b0 /
b100 .
b100 -
b100 ,
b0 +
bx *
0)
0(
b101 '
bx &
b1000 %
x$
0#
1"
0!
$end
#5
1!
#10
0!
0"
#15
b1001 %
b1001 i
b1001 p
b1100 I
b1000 -
b1000 X
b1000 e
b1001000000000000001100 5
b1001000000000000001100 Y
b1001000000000000001100 ]
b10010000000000000011 [
b1001 g
b11 >
b11 '
b11 B
b11 r
b11 q
b1001 n
b1000 .
b1000 M
b1000 W
b100000000010010000000000000011 7
b100000000010010000000000000011 U
b10100 0
b10100 J
b10100 L
b1000 ,
b1000 K
b1000 N
b1000 \
b1000 c
b100 /
b100 V
b100 d
b100 f
1!
#20
0!
#25
b1010 %
b1010 i
b1010 p
b10100000010000000 I
1)
1(
b10 <
b10 ?
b10 Q
b1100 -
b1100 X
b1100 e
b100001001010100000010000000 5
b100001001010100000010000000 Y
b100001001010100000010000000 ]
b1000010010101000000100000 [
b1010 h
b100000 >
b101000000100000 '
b101000000100000 B
b101000000100000 r
b101000000100000 q
bx +
bx G
bx k
b1000 m
b0 P
b1100 .
b1100 M
b1100 W
b1000010010101000000100000 7
b1000010010101000000100000 U
b10100000010001100 0
b10100000010001100 J
b10100000010001100 L
b1100 ,
b1100 K
b1100 N
b1100 \
b1100 c
b1000 /
b1000 V
b1000 d
b1000 f
1!
#30
0!
#35
b0 &
b0 `
b0 o
1$
b0 ;
b0 H
b0 R
b0 ^
b0 9
b0 A
b0 F
b0 I
0)
1:
0(
11
b0 <
b0 ?
b0 Q
b10000 -
b10000 X
b10000 e
b1010000000000000000000 5
b1010000000000000000000 Y
b1010000000000000000000 ]
b10100000000000000000 [
b0 h
b1010 g
b0 >
b0 '
b0 B
b0 r
b0 q
b1010 n
b0 +
b0 G
b0 k
b0 m
b101011 P
b10000 .
b10000 M
b10000 W
b10101100000010100000000000000000 7
b10101100000010100000000000000000 U
b10000 0
b10000 J
b10000 L
b10000 ,
b10000 K
b10000 N
b10000 \
b10000 c
b1100 /
b1100 V
b1100 d
b1100 f
1!
#40
0!
#45
b0 %
b0 i
b0 p
b11000 I
0:
01
16
b11000 -
b11000 X
b11000 e
b11000 5
b11000 Y
b11000 ]
b110 [
b0 g
b110 >
b110 '
b110 B
b110 r
b110 q
b0 *
b0 C
b0 T
b0 l
b0 n
b10 P
b10100 .
b10100 M
b10100 W
b1000000000000000000000000110 7
b1000000000000000000000000110 U
b101100 0
b101100 J
b101100 L
b10100 ,
b10100 K
b10100 N
b10100 \
b10100 c
b10000 /
b10000 V
b10000 d
b10000 f
1!
#50
0!
#55
bx &
bx `
bx o
b11100 -
b11100 X
b11100 e
b1100 %
b1100 i
b1100 p
b0 I
1:
12
1(
14
06
b1100000000000000000000 5
b1100000000000000000000 Y
b1100000000000000000000 ]
b11000000000000000000 [
b1100 g
b0 >
b0 '
b0 B
b0 r
b0 q
bx *
bx C
bx T
bx l
b1100 n
b100011 P
b11100 .
b11100 M
b11100 W
b10001100000011000000000000000000 7
b10001100000011000000000000000000 U
b11100 0
b11100 J
b11100 L
b11100 ,
b11100 K
b11100 N
b11100 \
b11100 c
b11000 /
b11000 V
b11000 d
b11000 f
1!
#60
0!
#65
bx %
bx i
bx p
bx 9
bx A
bx F
bx00 I
x$
bx ;
bx H
bx R
bx ^
0:
02
0(
04
b100000 -
b100000 X
b100000 e
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 5
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 Y
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 ]
bx [
bx h
bx g
bx >
bx '
bx B
bx r
bx q
bx n
bx +
bx G
bx k
bx m
bx P
b100000 .
b100000 M
b100000 W
bx 7
bx U
bx 0
bx J
bx L
b100000 ,
b100000 K
b100000 N
b100000 \
b100000 c
b11100 /
b11100 V
b11100 d
b11100 f
1!
#70
0!
#75
b100100 -
b100100 X
b100100 e
b100100 .
b100100 M
b100100 W
b100100 ,
b100100 K
b100100 N
b100100 \
b100100 c
b100000 /
b100000 V
b100000 d
b100000 f
1!
#80
0!
#85
b101000 -
b101000 X
b101000 e
b101000 .
b101000 M
b101000 W
b101000 ,
b101000 K
b101000 N
b101000 \
b101000 c
b100100 /
b100100 V
b100100 d
b100100 f
1!
#90
0!
#95
b101100 -
b101100 X
b101100 e
b101100 .
b101100 M
b101100 W
b101100 ,
b101100 K
b101100 N
b101100 \
b101100 c
b101000 /
b101000 V
b101000 d
b101000 f
1!
#100
0!
#105
b110000 -
b110000 X
b110000 e
b110000 .
b110000 M
b110000 W
b110000 ,
b110000 K
b110000 N
b110000 \
b110000 c
b101100 /
b101100 V
b101100 d
b101100 f
1!
#110
0!
#115
b110100 -
b110100 X
b110100 e
b110100 .
b110100 M
b110100 W
b110100 ,
b110100 K
b110100 N
b110100 \
b110100 c
b110000 /
b110000 V
b110000 d
b110000 f
1!
#120
0!
#125
b111000 -
b111000 X
b111000 e
b111000 .
b111000 M
b111000 W
b111000 ,
b111000 K
b111000 N
b111000 \
b111000 c
b110100 /
b110100 V
b110100 d
b110100 f
1!
#130
0!
#135
b111100 -
b111100 X
b111100 e
b111100 .
b111100 M
b111100 W
b111100 ,
b111100 K
b111100 N
b111100 \
b111100 c
b111000 /
b111000 V
b111000 d
b111000 f
1!
#140
0!
#145
b1000000 -
b1000000 X
b1000000 e
b1000000 .
b1000000 M
b1000000 W
b1000000 ,
b1000000 K
b1000000 N
b1000000 \
b1000000 c
b111100 /
b111100 V
b111100 d
b111100 f
1!
#150
0!
#155
b1000100 -
b1000100 X
b1000100 e
b1000100 .
b1000100 M
b1000100 W
b1000100 ,
b1000100 K
b1000100 N
b1000100 \
b1000100 c
b1000000 /
b1000000 V
b1000000 d
b1000000 f
1!
#160
0!
#165
b1001000 -
b1001000 X
b1001000 e
b1001000 .
b1001000 M
b1001000 W
b1001000 ,
b1001000 K
b1001000 N
b1001000 \
b1001000 c
b1000100 /
b1000100 V
b1000100 d
b1000100 f
1!
#170
0!
#175
b1001100 -
b1001100 X
b1001100 e
b1001100 .
b1001100 M
b1001100 W
b1001100 ,
b1001100 K
b1001100 N
b1001100 \
b1001100 c
b1001000 /
b1001000 V
b1001000 d
b1001000 f
1!
#180
0!
#185
b1010000 -
b1010000 X
b1010000 e
b1010000 .
b1010000 M
b1010000 W
b1010000 ,
b1010000 K
b1010000 N
b1010000 \
b1010000 c
b1001100 /
b1001100 V
b1001100 d
b1001100 f
1!
#190
0!
#195
b1010100 -
b1010100 X
b1010100 e
b1010100 .
b1010100 M
b1010100 W
b1010100 ,
b1010100 K
b1010100 N
b1010100 \
b1010100 c
b1010000 /
b1010000 V
b1010000 d
b1010000 f
1!
#200
0!
#205
b1011000 -
b1011000 X
b1011000 e
b1011000 .
b1011000 M
b1011000 W
b1011000 ,
b1011000 K
b1011000 N
b1011000 \
b1011000 c
b1010100 /
b1010100 V
b1010100 d
b1010100 f
1!
#210
0!
