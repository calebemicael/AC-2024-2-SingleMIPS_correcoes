$date
	Tue Feb 11 22:18:24 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module simulacao $end
$var wire 32 ! mem_data_0 [31:0] $end
$var wire 32 " mem_data_4 [31:0] $end
$var wire 32 # t0 [31:0] $end
$var wire 32 $ t1 [31:0] $end
$var wire 32 % t2 [31:0] $end
$var wire 32 & t3 [31:0] $end
$var wire 32 ' pc_out [31:0] $end
$var wire 32 ( instrucao [31:0] $end
$var reg 1 ) clk $end
$var reg 1 * reset $end
$var reg 32 + stored_instrucao [31:0] $end
$var reg 32 , stored_pc [31:0] $end
$scope module mips_core $end
$var wire 1 - Zero $end
$var wire 1 ) clk $end
$var wire 32 . instrucao_out [31:0] $end
$var wire 32 / pc_out [31:0] $end
$var wire 32 0 pc_plus4 [31:0] $end
$var wire 1 * reset $end
$var wire 32 1 writeData [31:0] $end
$var wire 32 2 sign_extended_immediate [31:0] $end
$var wire 5 3 reg_write_addr [4:0] $end
$var wire 32 4 readData2 [31:0] $end
$var wire 32 5 readData1 [31:0] $end
$var wire 32 6 pc_next_jump [31:0] $end
$var wire 32 7 pc_next [31:0] $end
$var wire 32 8 memReadData [31:0] $end
$var wire 32 9 jump_shifted [31:0] $end
$var wire 32 : jump_address [31:0] $end
$var wire 32 ; instrucao [31:0] $end
$var wire 1 < RegWrite $end
$var wire 1 = RegDst $end
$var wire 1 > MemtoReg $end
$var wire 1 ? MemWrite $end
$var wire 1 @ MemRead $end
$var wire 1 A Jump $end
$var wire 1 B Branch $end
$var wire 1 C ALUSrc $end
$var wire 32 D ALUResult [31:0] $end
$var wire 2 E ALUOp [1:0] $end
$var wire 4 F ALUControl [3:0] $end
$scope module add4 $end
$var wire 32 G out [31:0] $end
$var wire 32 H in [31:0] $end
$upscope $end
$scope module alu_control $end
$var wire 6 I funct [5:0] $end
$var wire 2 J ALUOp [1:0] $end
$var reg 4 K ALUControl [3:0] $end
$upscope $end
$scope module control $end
$var wire 6 L opcode [5:0] $end
$var reg 2 M ALUOp [1:0] $end
$var reg 1 C ALUSrc $end
$var reg 1 B Branch $end
$var reg 1 A Jump $end
$var reg 1 @ MemRead $end
$var reg 1 ? MemWrite $end
$var reg 1 > MemtoReg $end
$var reg 1 = RegDst $end
$var reg 1 < RegWrite $end
$upscope $end
$scope module data_mem $end
$var wire 1 @ MemRead $end
$var wire 1 ? MemWrite $end
$var wire 1 ) clk $end
$var wire 32 N writeData [31:0] $end
$var wire 32 O readData [31:0] $end
$var wire 32 P address [31:0] $end
$var integer 32 Q i [31:0] $end
$upscope $end
$scope module fetch $end
$var wire 1 A Jump $end
$var wire 1 ) clk $end
$var wire 32 R jump_address [31:0] $end
$var wire 1 * reset $end
$var wire 32 S pc_plus4 [31:0] $end
$var wire 32 T pc_next [31:0] $end
$var wire 32 U instrucao [31:0] $end
$var reg 32 V pc [31:0] $end
$scope module add4 $end
$var wire 32 W in [31:0] $end
$var wire 32 X out [31:0] $end
$upscope $end
$scope module imem $end
$var wire 32 Y addr [31:0] $end
$var wire 32 Z instrucao [31:0] $end
$upscope $end
$scope module mux_jump $end
$var wire 32 [ in0 [31:0] $end
$var wire 32 \ in1 [31:0] $end
$var wire 1 A sel $end
$var wire 32 ] out [31:0] $end
$upscope $end
$upscope $end
$scope module jump_shift $end
$var wire 32 ^ in [31:0] $end
$var wire 32 _ out [31:0] $end
$upscope $end
$scope module mux_branch $end
$var wire 32 ` in1 [31:0] $end
$var wire 1 a sel $end
$var wire 32 b out [31:0] $end
$var wire 32 c in0 [31:0] $end
$upscope $end
$scope module mux_jump $end
$var wire 32 d in0 [31:0] $end
$var wire 32 e in1 [31:0] $end
$var wire 1 A sel $end
$var wire 32 f out [31:0] $end
$upscope $end
$scope module mux_memtoreg $end
$var wire 32 g in1 [31:0] $end
$var wire 1 > sel $end
$var wire 32 h out [31:0] $end
$var wire 32 i in0 [31:0] $end
$upscope $end
$scope module regs $end
$var wire 1 ) clk $end
$var wire 5 j r_write_res [4:0] $end
$var wire 1 < signal $end
$var wire 5 k v1_loc [4:0] $end
$var wire 5 l v2_loc [4:0] $end
$var wire 32 m v_write_res [31:0] $end
$var wire 32 n get_reg2 [31:0] $end
$var wire 32 o get_reg1 [31:0] $end
$var integer 32 p i [31:0] $end
$upscope $end
$scope module sign_extend $end
$var wire 16 q in [15:0] $end
$var reg 32 r out [31:0] $end
$upscope $end
$scope module ula_inst $end
$var wire 32 s A [31:0] $end
$var wire 32 t B [31:0] $end
$var wire 4 u f [3:0] $end
$var reg 32 v RES [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b101010 v
b10 u
b101010 t
b0 s
b101010 r
b101010 q
b100000 p
b0 o
b0 n
b101010 m
b1000 l
b0 k
b1000 j
b101010 i
b101010 h
b0 g
b100 f
b1000000000000010101000 e
b100 d
b100 c
b100 b
0a
b10101100 `
b1000000000000010101000 _
b10000000000000101010 ^
b100 ]
b1000000000000010101000 \
b100 [
b100000000010000000000000101010 Z
b0 Y
b100 X
b0 W
b0 V
b100000000010000000000000101010 U
b100 T
b100 S
b1000000000000010101000 R
b100000000 Q
b101010 P
b0 O
b0 N
b0 M
b1000 L
b10 K
b0 J
b101010 I
b0 H
b100 G
b10 F
b0 E
b101010 D
1C
0B
0A
0@
0?
0>
0=
1<
b100000000010000000000000101010 ;
b1000000000000010101000 :
b1000000000000010101000 9
b0 8
b100 7
b100 6
b0 5
b0 4
b1000 3
b101010 2
b101010 1
b100 0
b0 /
b100000000010000000000000101010 .
z-
bx ,
bx +
1*
0)
b100000000010000000000000101010 (
b0 '
b0 &
b0 %
b0 $
b0 #
b0 "
b0 !
$end
#10
b101010 4
b101010 N
b101010 n
b101010 #
1)
#20
b100000000010000000000000101010 +
b0 ,
0)
#22
0*
#30
b0 1
b0 h
b0 m
b0 D
b0 P
b0 i
b0 v
b0 t
1?
1C
0<
b1000000000000000000000 9
b1000000000000000000000 _
b0 2
b0 r
b0 I
b101011 L
b10000000000000000000 ^
b0 q
b1000000000000000000000 :
b1000000000000000000000 R
b1000000000000000000000 \
b1000000000000000000000 e
b1000 7
b1000 b
b1000 T
b1000 ]
b10101100000010000000000000000000 (
b10101100000010000000000000000000 .
b10101100000010000000000000000000 ;
b10101100000010000000000000000000 U
b10101100000010000000000000000000 Z
b1000 6
b1000 c
b1000 f
b1000 S
b1000 X
b1000 [
b1000 `
b1000 0
b1000 G
b1000 d
b100 '
b100 /
b100 H
b100 V
b100 W
b100 Y
1)
#40
b10101100000010000000000000000000 +
b100 ,
0)
#50
b101010 1
b101010 h
b101010 m
b101010 8
b101010 O
b101010 g
b0 4
b0 N
b0 n
b1001 3
b1001 j
1@
1>
1<
0?
1C
b1001000000000000000000 9
b1001000000000000000000 _
b1001 l
b100011 L
b10010000000000000000 ^
b1001000000000000000000 :
b1001000000000000000000 R
b1001000000000000000000 \
b1001000000000000000000 e
b1100 7
b1100 b
b1100 T
b1100 ]
b10001100000010010000000000000000 (
b10001100000010010000000000000000 .
b10001100000010010000000000000000 ;
b10001100000010010000000000000000 U
b10001100000010010000000000000000 Z
b1100 6
b1100 c
b1100 f
b101010 !
b1100 S
b1100 X
b1100 [
b1100 `
b1100 0
b1100 G
b1100 d
b1000 '
b1000 /
b1000 H
b1000 V
b1000 W
b1000 Y
1)
#60
b10001100000010010000000000000000 +
b1000 ,
0)
#70
b1100100 D
b1100100 P
b1100100 i
b1100100 v
b0 8
b0 O
b0 g
b1100100 1
b1100100 h
b1100100 m
b1100100 t
b1010 3
b1010 j
0@
0>
1C
1<
b1010000000000110010000 9
b1010000000000110010000 _
b1100100 2
b1100100 r
b100100 I
b1010 l
b1000 L
b10100000000001100100 ^
b1100100 q
b1010000000000110010000 :
b1010000000000110010000 R
b1010000000000110010000 \
b1010000000000110010000 e
b10000 7
b10000 b
b0 4
b0 N
b0 n
b10000 T
b10000 ]
b100000000010100000000001100100 (
b100000000010100000000001100100 .
b100000000010100000000001100100 ;
b100000000010100000000001100100 U
b100000000010100000000001100100 Z
b10000 6
b10000 c
b10000 f
b101010 $
b10000 S
b10000 X
b10000 [
b110100000 `
b10000 0
b10000 G
b10000 d
b1100 '
b1100 /
b1100 H
b1100 V
b1100 W
b1100 Y
1)
#80
b100000000010100000000001100100 +
b1100 ,
0)
#90
b100 1
b100 h
b100 m
b100 D
b100 P
b100 i
b100 v
b100 t
1?
1C
0<
b1010000000000000010000 9
b1010000000000000010000 _
b100 2
b100 r
b100 I
b101011 L
b10100000000000000100 ^
b100 q
b1010000000000000010000 :
b1010000000000000010000 R
b1010000000000000010000 \
b1010000000000000010000 e
b10100 7
b10100 b
b1100100 4
b1100100 N
b1100100 n
b10100 T
b10100 ]
b10101100000010100000000000000100 (
b10101100000010100000000000000100 .
b10101100000010100000000000000100 ;
b10101100000010100000000000000100 U
b10101100000010100000000000000100 Z
b10100 6
b10100 c
b10100 f
b1100100 %
b10100 S
b10100 X
b10100 [
b100100 `
b10100 0
b10100 G
b10100 d
b10000 '
b10000 /
b10000 H
b10000 V
b10000 W
b10000 Y
1)
#100
b10101100000010100000000000000100 +
b10000 ,
0)
#110
b1100100 8
b1100100 O
b1100100 g
b1100100 1
b1100100 h
b1100100 m
b0 4
b0 N
b0 n
b1011 3
b1011 j
1@
1>
1<
0?
1C
b1011000000000000010000 9
b1011000000000000010000 _
b1011 l
b100011 L
b10110000000000000100 ^
b1011000000000000010000 :
b1011000000000000010000 R
b1011000000000000010000 \
b1011000000000000010000 e
b11000 7
b11000 b
b11000 T
b11000 ]
b10001100000010110000000000000100 (
b10001100000010110000000000000100 .
b10001100000010110000000000000100 ;
b10001100000010110000000000000100 U
b10001100000010110000000000000100 Z
b11000 6
b11000 c
b11000 f
b1100100 "
b11000 S
b11000 X
b11000 [
b101000 `
b11000 0
b11000 G
b11000 d
b10100 '
b10100 /
b10100 H
b10100 V
b10100 W
b10100 Y
1)
#120
b10001100000010110000000000000100 +
b10100 ,
0)
#130
b0 D
b0 P
b0 i
b0 v
b0 8
b0 O
b0 g
b0 1
b0 h
b0 m
b0 t
b0 3
b0 j
1A
0@
0>
0C
0<
b11000 9
b11000 _
b110 2
b110 r
b110 I
b0 l
b10 L
b110 ^
b110 q
b11000 :
b11000 R
b11000 \
b11000 e
b11000 7
b11000 b
b0 4
b0 N
b0 n
b11000 T
b11000 ]
b1000000000000000000000000110 (
b1000000000000000000000000110 .
b1000000000000000000000000110 ;
b1000000000000000000000000110 U
b1000000000000000000000000110 Z
b11000 6
b11000 c
b11000 f
b1100100 &
b11100 S
b11100 X
b11100 [
b110100 `
b11100 0
b11100 G
b11100 d
b11000 '
b11000 /
b11000 H
b11000 V
b11000 W
b11000 Y
1)
#140
b1000000000000000000000000110 +
b11000 ,
0)
#150
1)
#160
0)
#170
1)
#180
0)
#190
1)
#200
0)
#210
1)
#220
0)
#230
1)
#240
0)
#250
1)
#260
0)
#270
1)
#280
0)
#290
1)
#300
0)
#310
1)
#320
0)
#330
1)
#340
0)
#350
1)
#360
0)
#370
1)
#380
0)
#390
1)
#400
0)
#410
1)
#420
0)
#430
1)
#440
0)
#450
1)
#460
0)
#470
1)
#480
0)
#490
1)
#500
0)
#510
1)
#520
0)
#530
1)
#540
0)
#550
1)
#560
0)
#570
1)
#580
0)
#590
1)
#600
0)
#610
1)
#620
0)
#630
1)
#640
0)
#650
1)
#660
0)
#670
1)
#680
0)
#690
1)
#700
0)
#710
1)
#720
0)
#730
1)
#740
0)
#750
1)
#760
0)
#770
1)
#780
0)
#790
1)
#800
0)
#810
1)
#820
0)
#830
1)
#840
0)
#850
1)
#860
0)
#870
1)
#880
0)
#890
1)
#900
0)
#910
1)
#920
0)
#930
1)
#940
0)
#950
1)
#960
0)
#970
1)
#980
0)
#990
1)
#1000
0)
