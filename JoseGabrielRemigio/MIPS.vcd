$date
	Sun Feb 16 21:08:45 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module Simulation $end
$var reg 1 ! clk $end
$var reg 1 " reset $end
$var integer 32 # i [31:0] $end
$scope module processor $end
$var wire 1 $ andBranchZero $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var wire 32 % writeDataWire [31:0] $end
$var wire 32 & signExtended [31:0] $end
$var wire 5 ' selectedWrite [4:0] $end
$var wire 1 ( regWrite $end
$var wire 1 ) regDst $end
$var wire 32 * readDataMem [31:0] $end
$var wire 32 + readData2 [31:0] $end
$var wire 32 , readData1 [31:0] $end
$var wire 32 - nextInstruction [31:0] $end
$var wire 1 . memWrite $end
$var wire 1 / memToReg $end
$var wire 1 0 memRead $end
$var wire 28 1 jumpAdress [27:0] $end
$var wire 1 2 jump $end
$var wire 32 3 instruction [31:0] $end
$var wire 32 4 incrementedPc [31:0] $end
$var wire 1 5 branch $end
$var wire 32 6 beqShiftWire [31:0] $end
$var wire 32 7 addALUresult [31:0] $end
$var wire 32 8 addALUmuxResult [31:0] $end
$var wire 1 9 ALUzero $end
$var wire 1 : ALUsource $end
$var wire 32 ; ALUsecondOperand [31:0] $end
$var wire 32 < ALUresult [31:0] $end
$var wire 2 = ALUop [1:0] $end
$var wire 4 > ALUcontrolWire [3:0] $end
$scope module addAlu $end
$var wire 32 ? out [31:0] $end
$var wire 32 @ in2 [31:0] $end
$var wire 32 A in1 [31:0] $end
$upscope $end
$scope module alu $end
$var wire 1 9 zero $end
$var wire 32 B operand2 [31:0] $end
$var wire 32 C operand1 [31:0] $end
$var wire 4 D ALUoperation [3:0] $end
$var reg 32 E ALUresult [31:0] $end
$upscope $end
$scope module aluControl $end
$var wire 6 F funct [5:0] $end
$var wire 2 G ALUop [1:0] $end
$var reg 4 H ALUcontrol [3:0] $end
$upscope $end
$scope module beqFetch $end
$var wire 32 I out [31:0] $end
$var wire 32 J in [31:0] $end
$upscope $end
$scope module control $end
$var wire 6 K opCode [5:0] $end
$var reg 2 L ALUop [1:0] $end
$var reg 1 : ALUsource $end
$var reg 1 5 branch $end
$var reg 1 2 jump $end
$var reg 1 0 memRead $end
$var reg 1 / memToReg $end
$var reg 1 . memWrite $end
$var reg 1 ) regDst $end
$var reg 1 ( regWrite $end
$upscope $end
$scope module dataMemory $end
$var wire 32 M address [31:0] $end
$var wire 1 ! clk $end
$var wire 1 0 memRead $end
$var wire 1 . memWrite $end
$var wire 32 N writeData [31:0] $end
$var wire 32 O readData [31:0] $end
$var integer 32 P i [31:0] $end
$upscope $end
$scope module fetchUnit $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var wire 32 Q nextInstruction [31:0] $end
$var wire 32 R instruction [31:0] $end
$var wire 32 S incrementedPc [31:0] $end
$var reg 32 T pc [31:0] $end
$scope module memory $end
$var wire 32 U addr [31:0] $end
$var wire 32 V instruction [31:0] $end
$upscope $end
$scope module somador $end
$var wire 32 W in [31:0] $end
$var wire 32 X out [31:0] $end
$upscope $end
$upscope $end
$scope module jumpShift $end
$var wire 26 Y in [25:0] $end
$var wire 28 Z out [27:0] $end
$upscope $end
$scope module muxALUoperand $end
$var wire 1 : s $end
$var wire 32 [ in2 [31:0] $end
$var wire 32 \ in1 [31:0] $end
$var reg 32 ] out [31:0] $end
$upscope $end
$scope module muxInstruction $end
$var wire 32 ^ in1 [31:0] $end
$var wire 32 _ in2 [31:0] $end
$var wire 1 $ s $end
$var reg 32 ` out [31:0] $end
$upscope $end
$scope module muxJump $end
$var wire 32 a in1 [31:0] $end
$var wire 32 b in2 [31:0] $end
$var wire 1 2 s $end
$var reg 32 c out [31:0] $end
$upscope $end
$scope module muxMemRead $end
$var wire 32 d in1 [31:0] $end
$var wire 32 e in2 [31:0] $end
$var wire 1 / s $end
$var reg 32 f out [31:0] $end
$upscope $end
$scope module muxWriteReg $end
$var wire 5 g in1 [4:0] $end
$var wire 5 h in2 [4:0] $end
$var wire 1 ) s $end
$var reg 5 i out [4:0] $end
$upscope $end
$scope module registers $end
$var wire 32 j readData1 [31:0] $end
$var wire 32 k readData2 [31:0] $end
$var wire 5 l readRegister1 [4:0] $end
$var wire 5 m readRegister2 [4:0] $end
$var wire 1 ( regWrite $end
$var wire 32 n writeData [31:0] $end
$var wire 5 o writeRegister [4:0] $end
$var integer 32 p i [31:0] $end
$upscope $end
$scope module signExtender $end
$var wire 16 q in [15:0] $end
$var wire 32 r out [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulation $end
$scope module processor $end
$scope module fetchUnit $end
$scope module memory $end
$var reg 32 s \memory[0] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulation $end
$scope module processor $end
$scope module registers $end
$var reg 32 t \registers[0] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulation $end
$scope module processor $end
$scope module fetchUnit $end
$scope module memory $end
$var reg 32 u \memory[1] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulation $end
$scope module processor $end
$scope module registers $end
$var reg 32 v \registers[1] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulation $end
$scope module processor $end
$scope module fetchUnit $end
$scope module memory $end
$var reg 32 w \memory[2] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulation $end
$scope module processor $end
$scope module registers $end
$var reg 32 x \registers[2] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulation $end
$scope module processor $end
$scope module fetchUnit $end
$scope module memory $end
$var reg 32 y \memory[3] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulation $end
$scope module processor $end
$scope module registers $end
$var reg 32 z \registers[3] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulation $end
$scope module processor $end
$scope module fetchUnit $end
$scope module memory $end
$var reg 32 { \memory[4] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulation $end
$scope module processor $end
$scope module registers $end
$var reg 32 | \registers[4] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulation $end
$scope module processor $end
$scope module fetchUnit $end
$scope module memory $end
$var reg 32 } \memory[5] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulation $end
$scope module processor $end
$scope module registers $end
$var reg 32 ~ \registers[5] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulation $end
$scope module processor $end
$scope module fetchUnit $end
$scope module memory $end
$var reg 32 !" \memory[6] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulation $end
$scope module processor $end
$scope module registers $end
$var reg 32 "" \registers[6] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulation $end
$scope module processor $end
$scope module fetchUnit $end
$scope module memory $end
$var reg 32 #" \memory[7] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulation $end
$scope module processor $end
$scope module registers $end
$var reg 32 $" \registers[7] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulation $end
$scope module processor $end
$scope module fetchUnit $end
$scope module memory $end
$var reg 32 %" \memory[8] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulation $end
$scope module processor $end
$scope module registers $end
$var reg 32 &" \registers[8] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulation $end
$scope module processor $end
$scope module fetchUnit $end
$scope module memory $end
$var reg 32 '" \memory[9] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulation $end
$scope module processor $end
$scope module registers $end
$var reg 32 (" \registers[9] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulation $end
$scope module processor $end
$scope module fetchUnit $end
$scope module memory $end
$var reg 32 )" \memory[10] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulation $end
$scope module processor $end
$scope module registers $end
$var reg 32 *" \registers[10] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulation $end
$scope module processor $end
$scope module fetchUnit $end
$scope module memory $end
$var reg 32 +" \memory[11] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulation $end
$scope module processor $end
$scope module registers $end
$var reg 32 ," \registers[11] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulation $end
$scope module processor $end
$scope module fetchUnit $end
$scope module memory $end
$var reg 32 -" \memory[12] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulation $end
$scope module processor $end
$scope module registers $end
$var reg 32 ." \registers[12] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulation $end
$scope module processor $end
$scope module fetchUnit $end
$scope module memory $end
$var reg 32 /" \memory[13] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulation $end
$scope module processor $end
$scope module registers $end
$var reg 32 0" \registers[13] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulation $end
$scope module processor $end
$scope module fetchUnit $end
$scope module memory $end
$var reg 32 1" \memory[14] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulation $end
$scope module processor $end
$scope module registers $end
$var reg 32 2" \registers[14] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulation $end
$scope module processor $end
$scope module fetchUnit $end
$scope module memory $end
$var reg 32 3" \memory[15] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulation $end
$scope module processor $end
$scope module registers $end
$var reg 32 4" \registers[15] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulation $end
$scope module processor $end
$scope module fetchUnit $end
$scope module memory $end
$var reg 32 5" \memory[16] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulation $end
$scope module processor $end
$scope module registers $end
$var reg 32 6" \registers[16] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulation $end
$scope module processor $end
$scope module fetchUnit $end
$scope module memory $end
$var reg 32 7" \memory[17] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulation $end
$scope module processor $end
$scope module registers $end
$var reg 32 8" \registers[17] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulation $end
$scope module processor $end
$scope module fetchUnit $end
$scope module memory $end
$var reg 32 9" \memory[18] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulation $end
$scope module processor $end
$scope module registers $end
$var reg 32 :" \registers[18] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulation $end
$scope module processor $end
$scope module fetchUnit $end
$scope module memory $end
$var reg 32 ;" \memory[19] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulation $end
$scope module processor $end
$scope module registers $end
$var reg 32 <" \registers[19] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulation $end
$scope module processor $end
$scope module fetchUnit $end
$scope module memory $end
$var reg 32 =" \memory[20] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulation $end
$scope module processor $end
$scope module registers $end
$var reg 32 >" \registers[20] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulation $end
$scope module processor $end
$scope module fetchUnit $end
$scope module memory $end
$var reg 32 ?" \memory[21] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulation $end
$scope module processor $end
$scope module registers $end
$var reg 32 @" \registers[21] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulation $end
$scope module processor $end
$scope module fetchUnit $end
$scope module memory $end
$var reg 32 A" \memory[22] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulation $end
$scope module processor $end
$scope module registers $end
$var reg 32 B" \registers[22] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulation $end
$scope module processor $end
$scope module fetchUnit $end
$scope module memory $end
$var reg 32 C" \memory[23] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulation $end
$scope module processor $end
$scope module registers $end
$var reg 32 D" \registers[23] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulation $end
$scope module processor $end
$scope module fetchUnit $end
$scope module memory $end
$var reg 32 E" \memory[24] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulation $end
$scope module processor $end
$scope module registers $end
$var reg 32 F" \registers[24] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulation $end
$scope module processor $end
$scope module fetchUnit $end
$scope module memory $end
$var reg 32 G" \memory[25] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulation $end
$scope module processor $end
$scope module registers $end
$var reg 32 H" \registers[25] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulation $end
$scope module processor $end
$scope module fetchUnit $end
$scope module memory $end
$var reg 32 I" \memory[26] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulation $end
$scope module processor $end
$scope module registers $end
$var reg 32 J" \registers[26] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulation $end
$scope module processor $end
$scope module fetchUnit $end
$scope module memory $end
$var reg 32 K" \memory[27] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulation $end
$scope module processor $end
$scope module registers $end
$var reg 32 L" \registers[27] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulation $end
$scope module processor $end
$scope module fetchUnit $end
$scope module memory $end
$var reg 32 M" \memory[28] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulation $end
$scope module processor $end
$scope module registers $end
$var reg 32 N" \registers[28] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulation $end
$scope module processor $end
$scope module fetchUnit $end
$scope module memory $end
$var reg 32 O" \memory[29] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulation $end
$scope module processor $end
$scope module registers $end
$var reg 32 P" \registers[29] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulation $end
$scope module processor $end
$scope module fetchUnit $end
$scope module memory $end
$var reg 32 Q" \memory[30] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulation $end
$scope module processor $end
$scope module registers $end
$var reg 32 R" \registers[30] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulation $end
$scope module processor $end
$scope module fetchUnit $end
$scope module memory $end
$var reg 32 S" \memory[31] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulation $end
$scope module processor $end
$scope module registers $end
$var reg 32 T" \registers[31] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b0 T"
bx S"
b0 R"
bx Q"
b0 P"
bx O"
b0 N"
bx M"
b0 L"
bx K"
b0 J"
bx I"
b0 H"
bx G"
b0 F"
bx E"
b0 D"
bx C"
b0 B"
bx A"
b0 @"
bx ?"
b0 >"
bx ="
b0 <"
bx ;"
b0 :"
bx 9"
b0 8"
bx 7"
b0 6"
bx 5"
b0 4"
bx 3"
b0 2"
bx 1"
b0 0"
b100001110011100000000001100100 /"
b0 ."
b1000000100000000000000001110 -"
b0 ,"
b100001110011100000000000001010 +"
b0 *"
b10011000110010000000000000001 )"
b0 ("
b100000000110010000000000000111 '"
b0 &"
b1010010111100000000100101 %"
b0 $"
b1000010010111100000100100 #"
b0 ""
b100001101011101111111111111110 !"
b0 ~
b1100010100110100000100010 }
b0 |
b1000010010110000000100000 {
b0 z
b100000000010110000000000000011 y
b0 x
b100000000010100000000000000101 w
b0 v
b100000000010010000000000000111 u
b0 t
b100000000010000000000000001100 s
bx r
bx q
b100000 p
bx o
bx n
bx m
bx l
bx k
bx j
bx i
bx h
bx g
bx f
bx e
bx d
bx c
bx b
bx00 a
bx `
bx _
bx ^
bx ]
bx \
bx [
bx00 Z
bx Y
bx X
bx W
bx V
bx U
bx T
bx S
bx R
bx Q
b100000000 P
bx O
bx N
bx M
bx L
bx K
bx J
bx00 I
bx H
bx G
bx F
bx E
bx D
bx C
bx B
bx00 A
bx @
bx ?
bx >
bx =
bx <
bx ;
x:
x9
bx 8
bx 7
bx00 6
x5
bx 4
bx 3
x2
bx00 1
x0
x/
x.
bx -
bx ,
bx +
bx *
x)
x(
bx '
bx &
bx %
x$
b100000 #
0"
0!
$end
#5
b1100 &"
b100 -
b100 Q
b100 c
b1100 %
b1100 f
b1100 n
b1100 ;
b1100 B
b1100 ]
b1000 '
b1000 i
b1000 o
b100 8
b100 `
b100 b
b110100 7
b110100 ?
b110100 ^
09
0$
b0 *
b0 O
b0 d
b1000000000000000110000 1
b1000000000000000110000 Z
b10 >
b10 D
b10 H
b110000 6
b110000 A
b110000 I
b1100 <
b1100 E
b1100 M
b1100 e
02
b0 =
b0 G
b0 L
05
0.
00
1(
0/
1:
0)
b10000000000000001100 Y
b1100 F
b1100 &
b1100 J
b1100 \
b1100 r
b1100 q
b1100 +
b1100 N
b1100 [
b1100 k
b1000 m
b0 ,
b0 C
b0 j
b0 l
b1000 h
b0 g
b1000 K
b100000000010000000000000001100 3
b100000000010000000000000001100 R
b100000000010000000000000001100 V
b1000000000000000110000 a
b100 4
b100 @
b100 S
b100 X
b100 _
b0 T
b0 U
b0 W
1!
1"
#10
0!
0"
#15
b111 %
b111 f
b111 n
b111 ("
b1000 -
b1000 Q
b1000 c
b111 <
b111 E
b111 M
b111 e
b111 ;
b111 B
b111 ]
b1001 '
b1001 i
b1001 o
b1000 8
b1000 `
b1000 b
b1001000000000000011100 a
b1001000000000000011100 1
b1001000000000000011100 Z
b11100 6
b11100 A
b11100 I
b10010000000000000111 Y
b111 F
b111 &
b111 J
b111 \
b111 r
b111 q
b111 +
b111 N
b111 [
b111 k
b1001 m
b1001 h
b100000000010010000000000000111 3
b100000000010010000000000000111 R
b100000000010010000000000000111 V
b100100 7
b100100 ?
b100100 ^
b1000 4
b1000 @
b1000 S
b1000 X
b1000 _
b100 T
b100 U
b100 W
1!
#20
0!
#25
b101 %
b101 f
b101 n
b101 *"
b1100 -
b1100 Q
b1100 c
b101 <
b101 E
b101 M
b101 e
b101 ;
b101 B
b101 ]
b1010 '
b1010 i
b1010 o
b1100 8
b1100 `
b1100 b
b1010000000000000010100 a
b1010000000000000010100 1
b1010000000000000010100 Z
b10100 6
b10100 A
b10100 I
b10100000000000000101 Y
b101 F
b101 &
b101 J
b101 \
b101 r
b101 q
b101 +
b101 N
b101 [
b101 k
b1010 m
b1010 h
b100000000010100000000000000101 3
b100000000010100000000000000101 R
b100000000010100000000000000101 V
b100000 7
b100000 ?
b100000 ^
b1100 4
b1100 @
b1100 S
b1100 X
b1100 _
b1000 T
b1000 U
b1000 W
1!
#30
0!
#35
b11 %
b11 f
b11 n
b11 ,"
b10000 -
b10000 Q
b10000 c
b11 <
b11 E
b11 M
b11 e
b11 ;
b11 B
b11 ]
b1011 '
b1011 i
b1011 o
b10000 8
b10000 `
b10000 b
b1011000000000000001100 a
b1011000000000000001100 1
b1011000000000000001100 Z
b1100 6
b1100 A
b1100 I
b10110000000000000011 Y
b11 F
b11 &
b11 J
b11 \
b11 r
b11 q
b11 +
b11 N
b11 [
b11 k
b1011 m
b1011 h
b100000000010110000000000000011 3
b100000000010110000000000000011 R
b100000000010110000000000000011 V
b11100 7
b11100 ?
b11100 ^
b10000 4
b10000 @
b10000 S
b10000 X
b10000 _
b1100 T
b1100 U
b1100 W
1!
#40
0!
#45
b10011 ."
b10100 -
b10100 Q
b10100 c
b10011 %
b10011 f
b10011 n
b111 ;
b111 B
b111 ]
b1100 '
b1100 i
b1100 o
b10100 8
b10100 `
b10100 b
b100001001011000000010000000 a
b100001001011000000010000000 1
b100001001011000000010000000 Z
b11000000010000000 6
b11000000010000000 A
b11000000010000000 I
b10011 <
b10011 E
b10011 M
b10011 e
b10 =
b10 G
b10 L
0:
1)
b1000010010110000000100000 Y
b100000 F
b110000000100000 &
b110000000100000 J
b110000000100000 \
b110000000100000 r
b110000000100000 q
b111 +
b111 N
b111 [
b111 k
b1001 m
b1100 ,
b1100 C
b1100 j
b1000 l
b1001 h
b1100 g
b0 K
b1000010010110000000100000 3
b1000010010110000000100000 R
b1000010010110000000100000 V
b11000000010010100 7
b11000000010010100 ?
b11000000010010100 ^
b10100 4
b10100 @
b10100 S
b10100 X
b10100 _
b10000 T
b10000 U
b10000 W
1!
#50
0!
#55
b1110 0"
b11000 -
b11000 Q
b11000 c
b1110 %
b1110 f
b1110 n
b101 ;
b101 B
b101 ]
b1101 '
b1101 i
b1101 o
b11000 8
b11000 `
b11000 b
b110001010011010000010001000 a
b110001010011010000010001000 1
b110001010011010000010001000 Z
b110 >
b110 D
b110 H
b11010000010001000 6
b11010000010001000 A
b11010000010001000 I
b1110 <
b1110 E
b1110 M
b1110 e
b1100010100110100000100010 Y
b100010 F
b110100000100010 &
b110100000100010 J
b110100000100010 \
b110100000100010 r
b110100000100010 q
b101 +
b101 N
b101 [
b101 k
b1010 m
b10011 ,
b10011 C
b10011 j
b1100 l
b1010 h
b1101 g
b1100010100110100000100010 3
b1100010100110100000100010 R
b1100010100110100000100010 V
b11010000010100000 7
b11010000010100000 ?
b11010000010100000 ^
b11000 4
b11000 @
b11000 S
b11000 X
b11000 _
b10100 T
b10100 U
b10100 W
1!
#60
0!
#65
b1100 2"
b11100 -
b11100 Q
b11100 c
b1100 %
b1100 f
b1100 n
b11111111111111111111111111111110 ;
b11111111111111111111111111111110 B
b11111111111111111111111111111110 ]
b1110 '
b1110 i
b1110 o
b11100 8
b11100 `
b11100 b
b110101110111111111111111000 a
b110101110111111111111111000 1
b110101110111111111111111000 Z
b10 >
b10 D
b10 H
b11111111111111111111111111111000 6
b11111111111111111111111111111000 A
b11111111111111111111111111111000 I
b1100 <
b1100 E
b1100 M
b1100 e
b0 =
b0 G
b0 L
1:
0)
b1101011101111111111111110 Y
b111110 F
b11111111111111111111111111111110 &
b11111111111111111111111111111110 J
b11111111111111111111111111111110 \
b11111111111111111111111111111110 r
b1111111111111110 q
b1100 +
b1100 N
b1100 [
b1100 k
b1110 m
b1110 ,
b1110 C
b1110 j
b1101 l
b1110 h
b11111 g
b1000 K
b100001101011101111111111111110 3
b100001101011101111111111111110 R
b100001101011101111111111111110 V
b10100 7
b10100 ?
b10100 ^
b11100 4
b11100 @
b11100 S
b11100 X
b11100 _
b11000 T
b11000 U
b11000 W
1!
#70
0!
#75
b100 4"
b100000 -
b100000 Q
b100000 c
b100 %
b100 f
b100 n
b111 ;
b111 B
b111 ]
b1111 '
b1111 i
b1111 o
b100000 8
b100000 `
b100000 b
b100001001011110000010010000 a
b100001001011110000010010000 1
b100001001011110000010010000 Z
b0 >
b0 D
b0 H
b11110000010010000 6
b11110000010010000 A
b11110000010010000 I
b100 <
b100 E
b100 M
b100 e
b10 =
b10 G
b10 L
0:
1)
b1000010010111100000100100 Y
b100100 F
b111100000100100 &
b111100000100100 J
b111100000100100 \
b111100000100100 r
b111100000100100 q
b111 +
b111 N
b111 [
b111 k
b1001 m
b1100 ,
b1100 C
b1100 j
b1000 l
b1001 h
b1111 g
b0 K
b1000010010111100000100100 3
b1000010010111100000100100 R
b1000010010111100000100100 V
b11110000010110000 7
b11110000010110000 ?
b11110000010110000 ^
b100000 4
b100000 @
b100000 S
b100000 X
b100000 _
b11100 T
b11100 U
b11100 W
1!
#80
0!
#85
b111 F"
b100100 -
b100100 Q
b100100 c
b111 %
b111 f
b111 n
b11 ;
b11 B
b11 ]
b11000 '
b11000 i
b11000 o
b100100 8
b100100 `
b100100 b
b101001011110000000010010100 a
b101001011110000000010010100 1
b101001011110000000010010100 Z
b1 >
b1 D
b1 H
b11111111111111110000000010010100 6
b11111111111111110000000010010100 A
b11111111111111110000000010010100 I
b111 <
b111 E
b111 M
b111 e
b1010010111100000000100101 Y
b100101 F
b11111111111111111100000000100101 &
b11111111111111111100000000100101 J
b11111111111111111100000000100101 \
b11111111111111111100000000100101 r
b1100000000100101 q
b11 +
b11 N
b11 [
b11 k
b1011 m
b101 ,
b101 C
b101 j
b1010 l
b1011 h
b11000 g
b1010010111100000000100101 3
b1010010111100000000100101 R
b1010010111100000000100101 V
b11111111111111110000000010111000 7
b11111111111111110000000010111000 ?
b11111111111111110000000010111000 ^
b100100 4
b100100 @
b100100 S
b100100 X
b100100 _
b100000 T
b100000 U
b100000 W
1!
#90
0!
#95
b111 H"
b101000 -
b101000 Q
b101000 c
b111 %
b111 f
b111 n
b111 ;
b111 B
b111 ]
b11001 '
b11001 i
b11001 o
b101000 8
b101000 `
b101000 b
b11001000000000000011100 a
b11001000000000000011100 1
b11001000000000000011100 Z
b10 >
b10 D
b10 H
b11100 6
b11100 A
b11100 I
b111 <
b111 E
b111 M
b111 e
b0 =
b0 G
b0 L
1:
0)
b110010000000000000111 Y
b111 F
b111 &
b111 J
b111 \
b111 r
b111 q
b111 +
b111 N
b111 [
b111 k
b11001 m
b0 ,
b0 C
b0 j
b0 l
b11001 h
b0 g
b1000 K
b100000000110010000000000000111 3
b100000000110010000000000000111 R
b100000000110010000000000000111 V
b1000100 7
b1000100 ?
b1000100 ^
b101000 4
b101000 @
b101000 S
b101000 X
b101000 _
b100100 T
b100100 U
b100100 W
1!
#100
0!
#105
b110000 -
b110000 Q
b110000 c
b0 %
b0 f
b0 n
b110000 8
b110000 `
b110000 b
1$
19
b1100011001000000000000000100 a
b1100011001000000000000000100 1
b1100011001000000000000000100 Z
b110 >
b110 D
b110 H
b100 6
b100 A
b100 I
b0 <
b0 E
b0 M
b0 e
b1 =
b1 G
b1 L
15
0(
0:
b11000110010000000000000001 Y
b1 F
b1 &
b1 J
b1 \
b1 r
b1 q
b111 ,
b111 C
b111 j
b11000 l
b100 K
b10011000110010000000000000001 3
b10011000110010000000000000001 R
b10011000110010000000000000001 V
b110000 7
b110000 ?
b110000 ^
b101100 4
b101100 @
b101100 S
b101100 X
b101100 _
b101000 T
b101000 U
b101000 W
1!
#110
0!
#115
b0 %
b0 f
b0 n
b10000000000000000111000 -
b10000000000000000111000 Q
b10000000000000000111000 c
b0 ;
b0 B
b0 ]
b10000 '
b10000 i
b10000 o
b110100 8
b110100 `
b110100 b
19
0$
b10000000000000000111000 a
b10000000000000000111000 1
b10000000000000000111000 Z
b10 >
b10 D
b10 H
b111000 6
b111000 A
b111000 I
b0 <
b0 E
b0 M
b0 e
12
b0 =
b0 G
b0 L
05
b100000000000000001110 Y
b1110 F
b1110 &
b1110 J
b1110 \
b1110 r
b1110 q
b0 +
b0 N
b0 [
b0 k
b10000 m
b0 ,
b0 C
b0 j
b0 l
b10000 h
b10 K
b1000000100000000000000001110 3
b1000000100000000000000001110 R
b1000000100000000000000001110 V
b1101100 7
b1101100 ?
b1101100 ^
b110100 4
b110100 @
b110100 S
b110100 X
b110100 _
b110000 T
b110000 U
b110000 W
1!
#120
0!
#125
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 -
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 Q
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 c
bx %
bx f
bx n
bx ;
bx B
bx ]
bx '
bx i
bx o
b10000000000000000111100 8
b10000000000000000111100 `
b10000000000000000111100 b
x9
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 a
bx00 1
bx00 Z
bx00 6
bx00 A
bx00 I
bx <
bx E
bx M
bx e
bx Y
bx F
bx &
bx J
bx \
bx r
bx q
bx +
bx N
bx [
bx k
bx m
bx ,
bx C
bx j
bx l
bx h
bx g
bx K
bx 3
bx R
bx V
bx 7
bx ?
bx ^
b10000000000000000111100 4
b10000000000000000111100 @
b10000000000000000111100 S
b10000000000000000111100 X
b10000000000000000111100 _
b10000000000000000111000 T
b10000000000000000111000 U
b10000000000000000111000 W
1!
#130
0!
#135
bx00 -
bx00 Q
bx00 c
bx 8
bx `
bx b
bx00 a
bx 4
bx @
bx S
bx X
bx _
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 T
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 U
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 W
1!
#140
0!
#145
bx00 T
bx00 U
bx00 W
1!
#150
0!
#155
1!
#160
0!
#165
1!
#170
0!
#175
1!
#180
0!
#185
1!
#190
0!
#195
1!
#200
0!
#205
1!
#210
0!
#215
1!
#220
0!
#225
1!
#230
0!
#235
1!
#240
0!
#245
1!
#250
0!
#255
1!
#260
0!
#265
1!
#270
0!
#275
1!
#280
0!
#285
1!
#290
0!
#295
1!
#300
0!
#305
1!
#310
0!
#315
1!
#320
0!
#325
1!
#330
0!
#335
1!
#340
0!
#345
1!
#350
0!
#355
1!
#360
0!
#365
1!
#370
0!
#375
1!
#380
0!
#385
1!
#390
0!
#395
1!
#400
0!
#405
1!
#410
0!
#415
1!
#420
0!
#425
1!
#430
0!
#435
1!
#440
0!
#445
1!
#450
0!
#455
1!
#460
0!
#465
1!
#470
0!
#475
1!
#480
0!
#485
1!
#490
0!
#495
1!
#500
0!
#505
1!
#510
0!
#515
1!
#520
0!
#525
1!
#530
0!
#535
1!
#540
0!
#545
1!
#550
0!
#555
1!
#560
0!
#565
1!
#570
0!
#575
1!
#580
0!
#585
1!
#590
0!
#595
1!
#600
0!
#605
1!
#610
0!
#615
1!
#620
0!
#625
1!
#630
0!
#635
1!
#640
0!
#645
1!
#650
0!
#655
1!
#660
0!
#665
1!
#670
0!
#675
1!
#680
0!
#685
1!
#690
0!
#695
1!
#700
0!
#705
1!
#710
0!
#715
1!
#720
0!
#725
1!
#730
0!
#735
1!
#740
0!
#745
1!
#750
0!
#755
1!
#760
0!
#765
1!
#770
0!
#775
1!
#780
0!
#785
1!
#790
0!
#795
1!
#800
0!
#805
1!
#810
0!
#815
1!
#820
0!
#825
1!
#830
0!
#835
1!
#840
0!
#845
1!
#850
0!
#855
1!
#860
0!
#865
1!
#870
0!
#875
1!
#880
0!
#885
1!
#890
0!
#895
1!
#900
0!
#905
1!
#910
0!
#915
1!
#920
0!
#925
1!
#930
0!
#935
1!
#940
0!
#945
1!
#950
0!
#955
1!
#960
0!
#965
1!
#970
0!
#975
1!
#980
0!
#985
1!
#990
0!
#995
1!
#1000
0!
#1005
1!
#1010
0!
