$date
	Tue Apr  8 12:34:51 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module test_MIPSProcessor $end
$var wire 32 ! result [31:0] $end
$var wire 32 " instruction [31:0] $end
$var reg 1 # clk $end
$var reg 1 $ reset $end
$scope module uut $end
$var wire 1 # clk $end
$var wire 1 $ reset $end
$var wire 32 % result [31:0] $end
$var wire 5 & writeRegister [4:0] $end
$var wire 32 ' writeData [31:0] $end
$var wire 32 ( signExtended [31:0] $end
$var wire 32 ) shiftedLeft2 [31:0] $end
$var wire 32 * secondALUOperand [31:0] $end
$var wire 4 + op [3:0] $end
$var wire 32 , memoryReadData [31:0] $end
$var wire 32 - instruction [31:0] $end
$var wire 1 . Zero $end
$var wire 1 / RegWrite $end
$var wire 1 0 RegDst $end
$var wire 32 1 ReadData2 [31:0] $end
$var wire 32 2 ReadData1 [31:0] $end
$var wire 1 3 MemWrite $end
$var wire 1 4 MemToReg $end
$var wire 1 5 MemRead $end
$var wire 1 6 Branch $end
$var wire 1 7 ALUSrc $end
$var wire 32 8 ALUResult [31:0] $end
$var wire 2 9 ALUOp [1:0] $end
$scope module ALUControl $end
$var wire 6 : funct [5:0] $end
$var wire 2 ; ALUOp [1:0] $end
$var reg 4 < op [3:0] $end
$upscope $end
$scope module ShiftLeft2 $end
$var wire 32 = out [31:0] $end
$var wire 32 > in [31:0] $end
$upscope $end
$scope module SignExtend $end
$var wire 16 ? in [15:0] $end
$var wire 32 @ out [31:0] $end
$upscope $end
$scope module alu $end
$var wire 4 A ALUOperation [3:0] $end
$var wire 1 . Zero $end
$var wire 32 B B [31:0] $end
$var wire 32 C A [31:0] $end
$var reg 32 D ALUResult [31:0] $end
$upscope $end
$scope module control_unit $end
$var wire 6 E opcode [5:0] $end
$var reg 2 F ALUOp [1:0] $end
$var reg 1 7 ALUSrc $end
$var reg 1 6 Branch $end
$var reg 1 5 MemRead $end
$var reg 1 4 MemToReg $end
$var reg 1 3 MemWrite $end
$var reg 1 0 RegDst $end
$var reg 1 / RegWrite $end
$upscope $end
$scope module dataMemory $end
$var wire 1 5 MemRead $end
$var wire 1 3 MemWrite $end
$var wire 32 G address [31:0] $end
$var wire 1 # clk $end
$var wire 32 H writeData [31:0] $end
$var wire 32 I readData [31:0] $end
$var integer 32 J i [31:0] $end
$upscope $end
$scope module fetch_unit $end
$var wire 1 6 Branch $end
$var wire 1 # clk $end
$var wire 32 K offset [31:0] $end
$var wire 1 $ reset $end
$var wire 1 . zero $end
$var wire 32 L instrucao_memoria [31:0] $end
$var reg 32 M PC [31:0] $end
$var reg 32 N instrucao [31:0] $end
$var reg 32 O nextPC [31:0] $end
$scope module memoria_instrucoes $end
$var wire 32 P addr [31:0] $end
$var wire 32 Q instrucao [31:0] $end
$var integer 32 R i [31:0] $end
$upscope $end
$upscope $end
$scope module muxALU $end
$var wire 1 7 ALUSrc $end
$var wire 32 S signExtended [31:0] $end
$var wire 32 T out [31:0] $end
$var wire 32 U dataRegister2 [31:0] $end
$upscope $end
$scope module muxMemToReg $end
$var wire 32 V ALUResult [31:0] $end
$var wire 1 4 MemToReg $end
$var wire 32 W dataMemory [31:0] $end
$var wire 32 X out [31:0] $end
$upscope $end
$scope module muxWriteRegister $end
$var wire 1 0 RegDst $end
$var wire 5 Y rdField [4:0] $end
$var wire 5 Z rtField [4:0] $end
$var wire 5 [ out [4:0] $end
$upscope $end
$scope module registers $end
$var wire 32 \ ReadData1 [31:0] $end
$var wire 32 ] ReadData2 [31:0] $end
$var wire 5 ^ ReadRegister1 [4:0] $end
$var wire 5 _ ReadRegister2 [4:0] $end
$var wire 1 / RegWrite $end
$var wire 32 ` WriteData [31:0] $end
$var wire 5 a WriteRegister [4:0] $end
$var wire 1 b clk $end
$var integer 32 c i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b100000 c
zb
bx a
bx `
bx _
bx ^
bx ]
bx \
bx [
bx Z
bx Y
bx X
bx W
bx V
bx U
bx T
bx S
b100000000 R
bx Q
bx P
bx O
bx N
bx M
bx L
bx00 K
b100000000 J
bx I
bx H
bx G
bx F
bx E
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
bx00 =
bx <
bx ;
bx :
bx 9
bx 8
x7
x6
x5
x4
x3
bx 2
bx 1
x0
x/
x.
bx -
bx ,
bx +
bx *
bx00 )
bx (
bx '
bx &
bx %
0$
0#
bx "
bx !
$end
#5
1#
#10
b10101111101010000000000000000000 L
b10101111101010000000000000000000 Q
b0 M
b0 P
0#
1$
#15
1.
b0 ,
b0 I
b0 W
b0 !
b0 %
b0 '
b0 X
b0 `
b100 O
b10 +
b10 <
b10 A
b0 8
b0 D
b0 G
b0 V
b1000 &
b1000 [
b1000 a
b0 9
b0 ;
b0 F
06
13
05
0/
04
17
00
b0 *
b0 B
b0 T
b0 )
b0 =
b0 K
b0 :
b100 1
b100 H
b100 U
b100 ]
b1000 _
b0 2
b0 C
b0 \
b11101 ^
b1000 Z
b0 Y
b101011 E
b0 (
b0 >
b0 @
b0 S
b0 ?
b10101111101010000000000000000000 "
b10101111101010000000000000000000 -
b10101111101010000000000000000000 N
1#
#20
0#
#25
1#
#30
0#
0$
#35
b10101111101010010000000000000100 L
b10101111101010010000000000000100 Q
b1000 O
b100 M
b100 P
1#
#40
0#
#45
0.
b100 !
b100 %
b100 '
b100 X
b100 `
b100 8
b100 D
b100 G
b100 V
b1001 &
b1001 [
b1001 a
b100 *
b100 B
b100 T
b10000 )
b10000 =
b10000 K
b100 :
b1100 1
b1100 H
b1100 U
b1100 ]
b1001 _
b1001 Z
b100 (
b100 >
b100 @
b100 S
b100 ?
b10101111101010100000000000001000 L
b10101111101010100000000000001000 Q
b1100 O
b10101111101010010000000000000100 "
b10101111101010010000000000000100 -
b10101111101010010000000000000100 N
b1000 M
b1000 P
1#
#50
0#
#55
b1000 !
b1000 %
b1000 '
b1000 X
b1000 `
b1000 8
b1000 D
b1000 G
b1000 V
b1010 &
b1010 [
b1010 a
b1000 *
b1000 B
b1000 T
b100000 )
b100000 =
b100000 K
b1000 :
b1000 1
b1000 H
b1000 U
b1000 ]
b1010 _
b1010 Z
b1000 (
b1000 >
b1000 @
b1000 S
b1000 ?
b10001111101010000000000000000000 L
b10001111101010000000000000000000 Q
b10000 O
b10101111101010100000000000001000 "
b10101111101010100000000000001000 -
b10101111101010100000000000001000 N
b1100 M
b1100 P
1#
#60
0#
#65
1.
b100 ,
b100 I
b100 W
b100 !
b100 %
b100 '
b100 X
b100 `
b0 8
b0 D
b0 G
b0 V
b1000 &
b1000 [
b1000 a
03
15
1/
14
b0 *
b0 B
b0 T
b0 )
b0 =
b0 K
b0 :
b100 1
b100 H
b100 U
b100 ]
b1000 _
b1000 Z
b100011 E
b0 (
b0 >
b0 @
b0 S
b0 ?
b10001111101010010000000000000100 L
b10001111101010010000000000000100 Q
b10100 O
b10001111101010000000000000000000 "
b10001111101010000000000000000000 -
b10001111101010000000000000000000 N
b10000 M
b10000 P
1#
#70
0#
#75
b1100 !
b1100 %
b1100 '
b1100 X
b1100 `
b1100 ,
b1100 I
b1100 W
0.
b100 8
b100 D
b100 G
b100 V
b1001 &
b1001 [
b1001 a
b100 *
b100 B
b100 T
b10000 )
b10000 =
b10000 K
b100 :
b1100 1
b1100 H
b1100 U
b1100 ]
b1001 _
b1001 Z
b100 (
b100 >
b100 @
b100 S
b100 ?
b10001111101010100000000000001000 L
b10001111101010100000000000001000 Q
b11000 O
b10001111101010010000000000000100 "
b10001111101010010000000000000100 -
b10001111101010010000000000000100 N
b10100 M
b10100 P
1#
#80
0#
#85
b1000 !
b1000 %
b1000 '
b1000 X
b1000 `
b1000 ,
b1000 I
b1000 W
b1000 8
b1000 D
b1000 G
b1000 V
b1010 &
b1010 [
b1010 a
b1000 *
b1000 B
b1000 T
b100000 )
b100000 =
b100000 K
b1000 :
b1000 1
b1000 H
b1000 U
b1000 ]
b1010 _
b1010 Z
b1000 (
b1000 >
b1000 @
b1000 S
b1000 ?
b1000010010101100000100000 L
b1000010010101100000100000 Q
b11100 O
b10001111101010100000000000001000 "
b10001111101010100000000000001000 -
b10001111101010100000000000001000 N
b11000 M
b11000 P
1#
#90
0#
#95
b0 ,
b0 I
b0 W
b10000 !
b10000 %
b10000 '
b10000 X
b10000 `
b10000 8
b10000 D
b10000 G
b10000 V
b1011 &
b1011 [
b1011 a
b10 9
b10 ;
b10 F
05
04
07
10
b1100 *
b1100 B
b1100 T
b10110000010000000 )
b10110000010000000 =
b10110000010000000 K
b100000 :
b1100 1
b1100 H
b1100 U
b1100 ]
b1001 _
b100 2
b100 C
b100 \
b1000 ^
b1001 Z
b1011 Y
b0 E
b101100000100000 (
b101100000100000 >
b101100000100000 @
b101100000100000 S
b101100000100000 ?
b1001010000101100000100010 L
b1001010000101100000100010 Q
b100000 O
b1000010010101100000100000 "
b1000010010101100000100000 -
b1000010010101100000100000 N
b11100 M
b11100 P
1#
#100
0#
#105
b1000 !
b1000 %
b1000 '
b1000 X
b1000 `
b110 +
b110 <
b110 A
b100 *
b100 B
b100 T
b1000 8
b1000 D
b1000 G
b1000 V
b10110000010001000 )
b10110000010001000 =
b10110000010001000 K
b100010 :
b100 1
b100 H
b100 U
b100 ]
b1000 _
b1100 2
b1100 C
b1100 \
b1001 ^
b1000 Z
b101100000100010 (
b101100000100010 >
b101100000100010 @
b101100000100010 S
b101100000100010 ?
b1000010010101100000100101 L
b1000010010101100000100101 Q
b100100 O
b1001010000101100000100010 "
b1001010000101100000100010 -
b1001010000101100000100010 N
b100000 M
b100000 P
1#
#110
0#
#115
0.
b1100 !
b1100 %
b1100 '
b1100 X
b1100 `
b1 +
b1 <
b1 A
b1100 *
b1100 B
b1100 T
b1100 8
b1100 D
b1100 G
b1100 V
b10110000010010100 )
b10110000010010100 =
b10110000010010100 K
b100101 :
b1100 1
b1100 H
b1100 U
b1100 ]
b1001 _
b100 2
b100 C
b100 \
b1000 ^
b1001 Z
b101100000100101 (
b101100000100101 >
b101100000100101 @
b101100000100101 S
b101100000100101 ?
b1000010010101100000100100 L
b1000010010101100000100100 Q
b101000 O
b1000010010101100000100101 "
b1000010010101100000100101 -
b1000010010101100000100101 N
b100100 M
b100100 P
1#
#120
0#
#125
b100 !
b100 %
b100 '
b100 X
b100 `
b100 8
b100 D
b100 G
b100 V
b0 +
b0 <
b0 A
b10110000010010000 )
b10110000010010000 =
b10110000010010000 K
b100100 :
b101100000100100 (
b101100000100100 >
b101100000100100 @
b101100000100100 S
b101100000100100 ?
b1000010100101100000101010 L
b1000010100101100000101010 Q
b101100 O
b1000010010101100000100100 "
b1000010010101100000100100 -
b1000010010101100000100100 N
b101000 M
b101000 P
1#
#130
0#
#135
b1 !
b1 %
b1 '
b1 X
b1 `
b1 8
b1 D
b1 G
b1 V
b111 +
b111 <
b111 A
b1000 *
b1000 B
b1000 T
b10110000010101000 )
b10110000010101000 =
b10110000010101000 K
b101010 :
b1000 1
b1000 H
b1000 U
b1000 ]
b1010 _
b1010 Z
b101100000101010 (
b101100000101010 >
b101100000101010 @
b101100000101010 S
b101100000101010 ?
b10101111101010110000000000001100 L
b10101111101010110000000000001100 Q
b110000 O
b1000010100101100000101010 "
b1000010100101100000101010 -
b1000010100101100000101010 N
b101100 M
b101100 P
1#
#140
0#
#145
b1100 !
b1100 %
b1100 '
b1100 X
b1100 `
b1100 8
b1100 D
b1100 G
b1100 V
b10 +
b10 <
b10 A
b1100 *
b1100 B
b1100 T
b0 9
b0 ;
b0 F
13
0/
17
00
b110000 )
b110000 =
b110000 K
b1100 :
b0 1
b0 H
b0 U
b0 ]
b1011 _
b0 2
b0 C
b0 \
b11101 ^
b1011 Z
b0 Y
b101011 E
b1100 (
b1100 >
b1100 @
b1100 S
b1100 ?
b0 L
b0 Q
b110100 O
b10101111101010110000000000001100 "
b10101111101010110000000000001100 -
b10101111101010110000000000001100 N
b110000 M
b110000 P
1#
#150
0#
#155
1.
b0 !
b0 %
b0 '
b0 X
b0 `
b0 8
b0 D
b0 G
b0 V
b1111 +
b1111 <
b1111 A
b0 &
b0 [
b0 a
b10 9
b10 ;
b10 F
03
1/
07
10
b0 *
b0 B
b0 T
b0 )
b0 =
b0 K
b0 :
b0 _
b0 ^
b0 Z
b0 E
b0 (
b0 >
b0 @
b0 S
b0 ?
b111000 O
b0 "
b0 -
b0 N
b110100 M
b110100 P
1#
#160
0#
#165
b111100 O
b111000 M
b111000 P
1#
