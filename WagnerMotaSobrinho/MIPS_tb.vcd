$date
	Sat Apr 12 18:39:17 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module MIPS_tb $end
$var wire 1 ! MemtoReg $end
$var wire 1 " MemWrite $end
$var wire 1 # MemRead $end
$var wire 32 $ ALUResult [31:0] $end
$var reg 1 % clk $end
$var reg 1 & reset $end
$scope module uut $end
$var wire 32 ' ALUResult [31:0] $end
$var wire 1 # MemRead $end
$var wire 1 " MemWrite $end
$var wire 1 ( branch_taken $end
$var wire 1 % clk $end
$var wire 1 & reset $end
$var wire 1 ) zero $end
$var wire 5 * write_register [4:0] $end
$var wire 32 + write_data [31:0] $end
$var wire 32 , sign_extended [31:0] $end
$var wire 1 - reg_write $end
$var wire 1 . reg_dst $end
$var wire 32 / read_data_2 [31:0] $end
$var wire 32 0 read_data_1 [31:0] $end
$var wire 32 1 pc_plus_4 [31:0] $end
$var wire 32 2 next_pc [31:0] $end
$var wire 1 3 mem_write $end
$var wire 1 4 mem_read $end
$var wire 32 5 mem_data [31:0] $end
$var wire 32 6 instrucao [31:0] $end
$var wire 32 7 deslocado [31:0] $end
$var wire 32 8 branch_target [31:0] $end
$var wire 1 9 branch $end
$var wire 1 : alu_src $end
$var wire 32 ; alu_result [31:0] $end
$var wire 32 < alu_operand2 [31:0] $end
$var wire 2 = alu_op [1:0] $end
$var wire 4 > alu_control_signal [3:0] $end
$var wire 1 ! MemtoReg $end
$var reg 32 ? pc_atual [31:0] $end
$scope module ALU $end
$var wire 32 @ B [31:0] $end
$var wire 1 ) Zero $end
$var wire 4 A ALUOperation [3:0] $end
$var wire 32 B A [31:0] $end
$var reg 32 C ALUResult [31:0] $end
$upscope $end
$scope module ALUC $end
$var wire 6 D funct [5:0] $end
$var wire 2 E ALUOp [1:0] $end
$var reg 4 F ALUControlSignal [3:0] $end
$upscope $end
$scope module IM $end
$var wire 32 G addr [31:0] $end
$var wire 32 H instrucao [31:0] $end
$var integer 32 I i [31:0] $end
$upscope $end
$scope module MEM $end
$var wire 32 J address [31:0] $end
$var wire 1 % clk $end
$var wire 32 K writeData [31:0] $end
$var wire 32 L readData [31:0] $end
$var wire 1 3 MemWrite $end
$var wire 1 4 MemRead $end
$var integer 32 M i [31:0] $end
$upscope $end
$scope module REG $end
$var wire 32 N ReadData1 [31:0] $end
$var wire 32 O ReadData2 [31:0] $end
$var wire 5 P ReadRegister1 [4:0] $end
$var wire 5 Q ReadRegister2 [4:0] $end
$var wire 5 R WriteRegister [4:0] $end
$var wire 1 % clk $end
$var wire 32 S WriteData [31:0] $end
$var wire 1 - RegWrite $end
$var integer 32 T i [31:0] $end
$upscope $end
$scope module SE $end
$var wire 16 U in [15:0] $end
$var wire 32 V out [31:0] $end
$upscope $end
$scope module SL2 $end
$var wire 32 W in [31:0] $end
$var wire 32 X out [31:0] $end
$upscope $end
$scope module UC $end
$var wire 6 Y opcode [5:0] $end
$var reg 2 Z ALUOp [1:0] $end
$var reg 1 : ALUSrc $end
$var reg 1 9 Branch $end
$var reg 1 4 MemRead $end
$var reg 1 3 MemWrite $end
$var reg 1 ! MemtoReg $end
$var reg 1 . RegDst $end
$var reg 1 - RegWrite $end
$upscope $end
$scope module add4_inst $end
$var wire 32 [ in [31:0] $end
$var wire 32 \ out [31:0] $end
$upscope $end
$scope module branch_adder $end
$var wire 32 ] a [31:0] $end
$var wire 32 ^ b [31:0] $end
$var wire 32 _ sum [31:0] $end
$upscope $end
$scope module mux_memtoreg $end
$var wire 32 ` ALUResult [31:0] $end
$var wire 1 ! MemtoReg $end
$var wire 32 a ReadData [31:0] $end
$var wire 32 b WriteData [31:0] $end
$upscope $end
$scope module mux_pc $end
$var wire 1 ( branch_taken $end
$var wire 32 c branch_target [31:0] $end
$var wire 32 d pc_plus_4 [31:0] $end
$var wire 32 e next_pc [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b100 e
b100 d
b1000 c
b1 b
b0 a
b1 `
b1000 _
b100 ^
b100 ]
b100 \
b0 [
b0 Z
b1000 Y
b100 X
b1 W
b1 V
b1 U
b100000 T
b1 S
b1000 R
b1000 Q
b0 P
b0 O
b0 N
b100000000 M
b0 L
b0 K
b1 J
b100000000 I
b100000000010000000000000000001 H
b0 G
b10 F
b0 E
b1 D
b1 C
b0 B
b10 A
b1 @
b0 ?
b10 >
b0 =
b1 <
b1 ;
1:
09
b1000 8
b100 7
b100000000010000000000000000001 6
b0 5
04
03
b100 2
b100 1
b0 0
b0 /
0.
1-
b1 ,
b1 +
b1000 *
0)
0(
b1 '
1&
0%
b1 $
0#
0"
0!
$end
#5000
b1 /
b1 K
b1 O
1%
#10000
0%
#15000
1%
#20000
0%
#25000
1%
#30000
0%
#35000
1%
#40000
0%
#45000
1%
#50000
0%
0&
#55000
b10 +
b10 S
b10 b
b10 $
b10 '
b10 ;
b10 C
b10 J
b10 `
b1001 *
b1001 R
b1000 7
b1000 X
b1000 ^
b10 <
b10 @
b10 D
b10 ,
b10 V
b10 W
b10 U
b0 /
b0 K
b0 O
b1001 Q
b100000000010010000000000000010 6
b100000000010010000000000000010 H
b1000 2
b1000 e
b10000 8
b10000 _
b10000 c
b1000 1
b1000 \
b1000 ]
b1000 d
b100 ?
b100 G
b100 [
1%
#60000
0%
#65000
b11 +
b11 S
b11 b
b1010 *
b1010 R
b10100000010000000 7
b10100000010000000 X
b10100000010000000 ^
b11 $
b11 '
b11 ;
b11 C
b11 J
b11 `
1.
b10 =
b10 E
b10 Z
0:
1-
b100000 D
b101000000100000 ,
b101000000100000 V
b101000000100000 W
b101000000100000 U
b1 0
b1 B
b1 N
b1000 P
b0 Y
b1000010010101000000100000 6
b1000010010101000000100000 H
b1100 2
b1100 e
b10 /
b10 K
b10 O
b10100000010001100 8
b10100000010001100 _
b10100000010001100 c
b1100 1
b1100 \
b1100 ]
b1100 d
b1000 ?
b1000 G
b1000 [
1%
#70000
0%
#75000
1)
b0 +
b0 S
b0 b
b0 7
b0 X
b0 ^
b0 <
b0 @
b0 $
b0 '
b0 ;
b0 C
b0 J
b0 `
1:
1"
13
0.
b0 =
b0 E
b0 Z
0-
b0 D
b0 ,
b0 V
b0 W
b0 U
b11 /
b11 K
b11 O
b1010 Q
b0 0
b0 B
b0 N
b0 P
b101011 Y
b10101100000010100000000000000000 6
b10101100000010100000000000000000 H
b10000 2
b10000 e
b10000 8
b10000 _
b10000 c
b10000 1
b10000 \
b10000 ]
b10000 d
b1100 ?
b1100 G
b1100 [
1%
#80000
0%
#85000
bx >
bx A
bx F
b0 *
b0 R
1.
b10 =
b10 E
b10 Z
1-
0:
0"
03
b0 /
b0 K
b0 O
b0 Q
b0 Y
b0 6
b0 H
b10100 2
b10100 e
b10100 8
b10100 _
b10100 c
b10100 1
b10100 \
b10100 ]
b10100 d
b10000 ?
b10000 G
b10000 [
1%
#90000
0%
#95000
b11000 2
b11000 e
b11000 8
b11000 _
b11000 c
b11000 1
b11000 \
b11000 ]
b11000 d
b10100 ?
b10100 G
b10100 [
1%
#100000
0%
#105000
b11100 2
b11100 e
b11100 8
b11100 _
b11100 c
b11100 1
b11100 \
b11100 ]
b11100 d
b11000 ?
b11000 G
b11000 [
1%
#110000
0%
#115000
b100000 2
b100000 e
b100000 8
b100000 _
b100000 c
b100000 1
b100000 \
b100000 ]
b100000 d
b11100 ?
b11100 G
b11100 [
1%
#120000
0%
#125000
b100100 2
b100100 e
b100100 8
b100100 _
b100100 c
b100100 1
b100100 \
b100100 ]
b100100 d
b100000 ?
b100000 G
b100000 [
1%
#130000
0%
#135000
b101000 2
b101000 e
b101000 8
b101000 _
b101000 c
b101000 1
b101000 \
b101000 ]
b101000 d
b100100 ?
b100100 G
b100100 [
1%
#140000
0%
#145000
b101100 2
b101100 e
b101100 8
b101100 _
b101100 c
b101100 1
b101100 \
b101100 ]
b101100 d
b101000 ?
b101000 G
b101000 [
1%
#150000
0%
