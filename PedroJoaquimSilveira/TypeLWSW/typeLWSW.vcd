$date
	Sat Feb 08 04:53:59 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module Simulacao $end
$var wire 32 ! signExtendedOffset [31:0] $end
$var wire 32 " memoryReadData [31:0] $end
$var wire 1 # Zero $end
$var wire 32 $ ReadData2 [31:0] $end
$var wire 32 % ReadData1 [31:0] $end
$var wire 32 & ALUResult [31:0] $end
$var reg 1 ' MemRead $end
$var reg 1 ( MemWrite $end
$var reg 5 ) ReadRegister1 [4:0] $end
$var reg 5 * ReadRegister2 [4:0] $end
$var reg 1 + RegWrite $end
$var reg 32 , WriteData [31:0] $end
$var reg 5 - WriteRegister [4:0] $end
$var reg 1 . clk $end
$var reg 32 / instruction [31:0] $end
$scope module alu $end
$var wire 4 0 ALUOperation [3:0] $end
$var wire 1 # Zero $end
$var wire 32 1 B [31:0] $end
$var wire 32 2 A [31:0] $end
$var reg 32 3 ALUResult [31:0] $end
$upscope $end
$scope module datamemory $end
$var wire 1 ' MemRead $end
$var wire 1 ( MemWrite $end
$var wire 32 4 address [31:0] $end
$var wire 1 . clk $end
$var wire 32 5 writeData [31:0] $end
$var wire 32 6 readData [31:0] $end
$var integer 32 7 i [31:0] $end
$upscope $end
$scope module regfile $end
$var wire 32 8 ReadData1 [31:0] $end
$var wire 32 9 ReadData2 [31:0] $end
$var wire 5 : ReadRegister1 [4:0] $end
$var wire 5 ; ReadRegister2 [4:0] $end
$var wire 1 + RegWrite $end
$var wire 32 < WriteData [31:0] $end
$var wire 5 = WriteRegister [4:0] $end
$var integer 32 > i [31:0] $end
$upscope $end
$scope module signExtend $end
$var wire 16 ? in [15:0] $end
$var wire 32 @ out [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b0 @
b0 ?
b100000 >
bx =
bx <
bx ;
bx :
bx 9
bx 8
b100000000 7
b0 6
bx 5
bx 4
bx 3
bx 2
b0 1
b10 0
b0 /
0.
bx -
bx ,
0+
bx *
bx )
0(
0'
bx &
bx %
bx $
x#
b0 "
b0 !
$end
#5
1.
#10
0#
b0 "
b0 6
b100 &
b100 3
b100 4
b100 !
b100 1
b100 @
b100 ?
0.
1'
1+
b1 -
b1 =
b0 %
b0 2
b0 8
b10 )
b10 :
b10001100010000010000000000000100 /
#15
1.
#20
0.
#25
1.
#30
b1000 &
b1000 3
b1000 4
b1000 !
b1000 1
b1000 @
b1000 ?
0.
1(
0'
b10101100010000010000000000001000 /
#35
1.
#40
0.
#45
1.
#50
0.
#55
1.
#60
0.
