$date
	Sat Feb 08 04:46:51 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module simulacao $end
$var wire 32 ! WriteData [31:0] $end
$var wire 1 " zero $end
$var wire 1 # writeData $end
$var wire 32 $ srcB [31:0] $end
$var wire 32 % singimmx4 [31:0] $end
$var wire 32 & singimm [31:0] $end
$var wire 32 ' readData [31:0] $end
$var wire 32 ( pcPlus4 [31:0] $end
$var wire 32 ) pcI [31:0] $end
$var wire 32 * pc [31:0] $end
$var wire 32 + instrucao [31:0] $end
$var wire 5 , WriteRegister [4:0] $end
$var wire 1 - RegWrite $end
$var wire 1 . RegDst $end
$var wire 32 / ReadData2 [31:0] $end
$var wire 32 0 ReadData1 [31:0] $end
$var wire 1 1 PCSrc $end
$var wire 32 2 PCBranch [31:0] $end
$var wire 1 3 MemtoReg $end
$var wire 1 4 MemWrite $end
$var wire 1 5 Branch $end
$var wire 4 6 ALUcontrol [3:0] $end
$var wire 1 7 ALUSrc $end
$var wire 32 8 ALUResult [31:0] $end
$var reg 1 9 clk $end
$var reg 1 : reset $end
$scope module adder32_unit $end
$var wire 32 ; b [31:0] $end
$var wire 32 < sum [31:0] $end
$var wire 32 = a [31:0] $end
$upscope $end
$scope module adder32_unit2 $end
$var wire 32 > b [31:0] $end
$var wire 32 ? sum [31:0] $end
$var wire 32 @ a [31:0] $end
$upscope $end
$scope module alu_unit $end
$var wire 32 A B [31:0] $end
$var wire 1 " Zero $end
$var wire 4 B ALUOperation [3:0] $end
$var wire 32 C A [31:0] $end
$var reg 32 D ALUResult [31:0] $end
$upscope $end
$scope module control_unit $end
$var wire 6 E Funct [5:0] $end
$var wire 6 F Opcode [5:0] $end
$var wire 1 1 PCSrc $end
$var wire 1 " zero $end
$var reg 1 7 ALUSrc $end
$var reg 4 G ALUcontrol [3:0] $end
$var reg 2 H ALUop [1:0] $end
$var reg 1 5 Branch $end
$var reg 1 4 MemWrite $end
$var reg 1 3 MemtoReg $end
$var reg 1 . RegDst $end
$var reg 1 - RegWrite $end
$upscope $end
$scope module extend_unit $end
$var wire 16 I in [15:0] $end
$var wire 32 J out [31:0] $end
$upscope $end
$scope module memory_unit $end
$var wire 1 4 MemWrite $end
$var wire 32 K address [31:0] $end
$var wire 1 9 clk $end
$var wire 32 L readData [31:0] $end
$var wire 32 M writeData [31:0] $end
$var integer 32 N i [31:0] $end
$upscope $end
$scope module mux5bits_unit $end
$var wire 5 O A [4:0] $end
$var wire 5 P B [4:0] $end
$var wire 1 . s $end
$var wire 5 Q r [4:0] $end
$upscope $end
$scope module reg_unit $end
$var wire 32 R ReadData1 [31:0] $end
$var wire 32 S ReadData2 [31:0] $end
$var wire 5 T ReadRegister1 [4:0] $end
$var wire 5 U ReadRegister2 [4:0] $end
$var wire 1 - RegWrite $end
$var wire 32 V WriteData [31:0] $end
$var wire 5 W WriteRegister [4:0] $end
$var wire 1 9 clk $end
$var integer 32 X i [31:0] $end
$upscope $end
$scope module sift_unit $end
$var wire 32 Y in [31:0] $end
$var wire 32 Z out [31:0] $end
$upscope $end
$scope module unidade_fetch $end
$var wire 1 9 clk $end
$var wire 32 [ pcI [31:0] $end
$var wire 1 : reset $end
$var wire 32 \ instrucao [31:0] $end
$var reg 32 ] pc [31:0] $end
$var reg 32 ^ pcOut [31:0] $end
$scope module memoria $end
$var wire 32 _ addr [31:0] $end
$var wire 32 ` instrucao [31:0] $end
$var integer 32 a i [31:0] $end
$upscope $end
$upscope $end
$scope begin $ivl_for_loop0 $end
$var integer 32 b i [31:0] $end
$upscope $end
$upscope $end
$scope module simulacao $end
$scope module reg_unit $end
$var reg 32 c \registers[0] [31:0] $end
$upscope $end
$upscope $end
$scope module simulacao $end
$scope module reg_unit $end
$var reg 32 d \registers[1] [31:0] $end
$upscope $end
$upscope $end
$scope module simulacao $end
$scope module reg_unit $end
$var reg 32 e \registers[2] [31:0] $end
$upscope $end
$upscope $end
$scope module simulacao $end
$scope module reg_unit $end
$var reg 32 f \registers[3] [31:0] $end
$upscope $end
$upscope $end
$scope module simulacao $end
$scope module reg_unit $end
$var reg 32 g \registers[4] [31:0] $end
$upscope $end
$upscope $end
$scope module simulacao $end
$scope module reg_unit $end
$var reg 32 h \registers[5] [31:0] $end
$upscope $end
$upscope $end
$scope module simulacao $end
$scope module reg_unit $end
$var reg 32 i \registers[6] [31:0] $end
$upscope $end
$upscope $end
$scope module simulacao $end
$scope module reg_unit $end
$var reg 32 j \registers[7] [31:0] $end
$upscope $end
$upscope $end
$scope module simulacao $end
$scope module reg_unit $end
$var reg 32 k \registers[8] [31:0] $end
$upscope $end
$upscope $end
$scope module simulacao $end
$scope module reg_unit $end
$var reg 32 l \registers[9] [31:0] $end
$upscope $end
$upscope $end
$scope module simulacao $end
$scope module reg_unit $end
$var reg 32 m \registers[10] [31:0] $end
$upscope $end
$upscope $end
$scope module simulacao $end
$scope module reg_unit $end
$var reg 32 n \registers[11] [31:0] $end
$upscope $end
$upscope $end
$scope module simulacao $end
$scope module reg_unit $end
$var reg 32 o \registers[12] [31:0] $end
$upscope $end
$upscope $end
$scope module simulacao $end
$scope module reg_unit $end
$var reg 32 p \registers[13] [31:0] $end
$upscope $end
$upscope $end
$scope module simulacao $end
$scope module reg_unit $end
$var reg 32 q \registers[14] [31:0] $end
$upscope $end
$upscope $end
$scope module simulacao $end
$scope module reg_unit $end
$var reg 32 r \registers[15] [31:0] $end
$upscope $end
$upscope $end
$scope module simulacao $end
$scope module reg_unit $end
$var reg 32 s \registers[16] [31:0] $end
$upscope $end
$upscope $end
$scope module simulacao $end
$scope module reg_unit $end
$var reg 32 t \registers[17] [31:0] $end
$upscope $end
$upscope $end
$scope module simulacao $end
$scope module reg_unit $end
$var reg 32 u \registers[18] [31:0] $end
$upscope $end
$upscope $end
$scope module simulacao $end
$scope module reg_unit $end
$var reg 32 v \registers[19] [31:0] $end
$upscope $end
$upscope $end
$scope module simulacao $end
$scope module reg_unit $end
$var reg 32 w \registers[20] [31:0] $end
$upscope $end
$upscope $end
$scope module simulacao $end
$scope module reg_unit $end
$var reg 32 x \registers[21] [31:0] $end
$upscope $end
$upscope $end
$scope module simulacao $end
$scope module reg_unit $end
$var reg 32 y \registers[22] [31:0] $end
$upscope $end
$upscope $end
$scope module simulacao $end
$scope module reg_unit $end
$var reg 32 z \registers[23] [31:0] $end
$upscope $end
$upscope $end
$scope module simulacao $end
$scope module reg_unit $end
$var reg 32 { \registers[24] [31:0] $end
$upscope $end
$upscope $end
$scope module simulacao $end
$scope module reg_unit $end
$var reg 32 | \registers[25] [31:0] $end
$upscope $end
$upscope $end
$scope module simulacao $end
$scope module reg_unit $end
$var reg 32 } \registers[26] [31:0] $end
$upscope $end
$upscope $end
$scope module simulacao $end
$scope module reg_unit $end
$var reg 32 ~ \registers[27] [31:0] $end
$upscope $end
$upscope $end
$scope module simulacao $end
$scope module reg_unit $end
$var reg 32 !" \registers[28] [31:0] $end
$upscope $end
$upscope $end
$scope module simulacao $end
$scope module reg_unit $end
$var reg 32 "" \registers[29] [31:0] $end
$upscope $end
$upscope $end
$scope module simulacao $end
$scope module reg_unit $end
$var reg 32 #" \registers[30] [31:0] $end
$upscope $end
$upscope $end
$scope module simulacao $end
$scope module reg_unit $end
$var reg 32 $" \registers[31] [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#10
$dumpvars
b0 $"
b0 #"
b0 ""
b0 !"
b0 ~
b0 }
b0 |
b0 {
b0 z
b0 y
b0 x
b0 w
b0 v
b0 u
b0 t
b0 s
b0 r
b0 q
b0 p
b0 o
b0 n
b0 m
b0 l
bz k
b0 j
b0 i
b0 h
b0 g
b0 f
b0 e
b0 d
b0 c
b100000 b
b100000000 a
b100000000010000000000000000001 `
b0 _
b0 ^
b0 ]
b100000000010000000000000000001 \
b100 [
b100 Z
b1 Y
b100000 X
b1000 W
bz V
b1000 U
b0 T
bz S
b0 R
b1000 Q
b1000 P
b0 O
b100000000 N
bz M
b0 L
b1 K
b1 J
b1 I
b0 H
b10 G
b1000 F
b1 E
b1 D
b0 C
b10 B
b1 A
b100 @
b1000 ?
b100 >
b0 =
b100 <
b100 ;
0:
09
b1 8
17
b10 6
05
04
03
b1000 2
01
b0 0
bz /
0.
1-
b1000 ,
b100000000010000000000000000001 +
b0 *
b100 )
b100 (
b0 '
b1 &
b100 %
b1 $
1#
0"
bz !
$end
#15
0#
b10 8
b10 D
b10 K
b1100 2
b1100 ?
b1000 %
b1000 @
b1000 Z
b10 $
b10 A
b1001 ,
b1001 Q
b1001 W
b10 &
b10 J
b10 Y
b10 I
b0 /
b0 M
b0 S
b1001 U
b1001 P
b10 E
b100000000010010000000000000010 +
b100000000010010000000000000010 \
b100000000010010000000000000010 `
bz k
b100 ]
b100 _
19
#20
09
#25
b1000 )
b1000 [
bz l
bz /
bz M
bz S
b10000 2
b10000 ?
b1000 (
b1000 <
b1000 >
b100 *
b100 =
b100 ^
19
#30
09
#35
x#
x"
bx '
bx L
b10100000010001000 2
b10100000010001000 ?
b10100000010000000 %
b10100000010000000 @
b10100000010000000 Z
b101000000100000 $
b101000000100000 A
bx 8
bx D
bx K
13
b101000000100000 &
b101000000100000 J
b101000000100000 Y
b101000000100000 I
bz 0
bz C
bz R
b1000 T
b1010 O
b100000 E
b0 F
b1000010010101000000100000 +
b1000010010101000000100000 \
b1000010010101000000100000 `
bz l
b1000 ]
b1000 _
19
#40
09
#45
b1100 )
b1100 [
bz l
b10100000010001100 2
b10100000010001100 ?
b1100 (
b1100 <
b1100 >
b1000 *
b1000 =
b1000 ^
19
#50
09
#55
0#
1"
b0 '
b0 L
b1100 2
b1100 ?
b0 %
b0 @
b0 Z
b0 $
b0 A
b0 8
b0 D
b0 K
b1010 ,
b1010 Q
b1010 W
14
0-
b0 &
b0 J
b0 Y
b0 I
b0 /
b0 M
b0 S
b1010 U
b0 0
b0 C
b0 R
b0 T
b1010 P
b0 O
b0 E
b101011 F
b10101100000010100000000000000000 +
b10101100000010100000000000000000 \
b10101100000010100000000000000000 `
bz l
b1100 ]
b1100 _
19
#60
09
#65
b10000 )
b10000 [
b10000 2
b10000 ?
b10000 (
b10000 <
b10000 >
b1100 *
b1100 =
b1100 ^
19
#70
09
#75
b0 ,
b0 Q
b0 W
04
1-
b0 U
b0 P
b0 F
b0 +
b0 \
b0 `
b10000 ]
b10000 _
19
#80
09
#85
b10100 )
b10100 [
b10100 2
b10100 ?
b10100 (
b10100 <
b10100 >
b10000 *
b10000 =
b10000 ^
19
#90
09
#95
b10100 ]
b10100 _
19
#100
09
#105
b11000 )
b11000 [
b11000 2
b11000 ?
b11000 (
b11000 <
b11000 >
b10100 *
b10100 =
b10100 ^
19
#110
09
