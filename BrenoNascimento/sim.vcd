$date
	Sun Apr  6 12:18:46 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module Simulacao $end
$var reg 1 ! clk $end
$var reg 1 " reset $end
$var integer 32 # i [31:0] $end
$scope module mips $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var wire 28 $ sinalShift_Jump [27:0] $end
$var wire 32 % sinalShift [31:0] $end
$var wire 32 & sinalExtendido [31:0] $end
$var wire 32 ' proximo_PC [31:0] $end
$var wire 32 ( instrucao [31:0] $end
$var wire 5 ) WriteRegister [4:0] $end
$var wire 32 * Reg_WriteData [31:0] $end
$var wire 32 + Reg_ReadData2 [31:0] $end
$var wire 32 , Reg_ReadData1 [31:0] $end
$var wire 1 - RegWrite $end
$var wire 1 . RegDst $end
$var wire 32 / PC_mais4 [31:0] $end
$var wire 32 0 PCOuBranch [31:0] $end
$var wire 1 1 MemtoReg $end
$var wire 32 2 Memoria_ReadData [31:0] $end
$var wire 32 3 Mem_Address [31:0] $end
$var wire 1 4 MemWrite $end
$var wire 1 5 MemRead $end
$var wire 1 6 Jump $end
$var wire 4 7 Control_ALUOperation [3:0] $end
$var wire 2 8 CLU_ALUOp [1:0] $end
$var wire 1 9 BranchEquals $end
$var wire 1 : Branch $end
$var wire 32 ; AddressDesvio [31:0] $end
$var wire 1 < ALUSrc $end
$var wire 32 = ALUMemoriaB [31:0] $end
$var reg 32 > PC [31:0] $end
$scope module alu_desvio $end
$var wire 32 ? A [31:0] $end
$var wire 4 @ ALUOperation [3:0] $end
$var wire 1 A Zero $end
$var wire 32 B B [31:0] $end
$var reg 32 C ALUResult [31:0] $end
$upscope $end
$scope module alu_memoria $end
$var wire 1 9 Zero $end
$var wire 32 D B [31:0] $end
$var wire 4 E ALUOperation [3:0] $end
$var wire 32 F A [31:0] $end
$var reg 32 G ALUResult [31:0] $end
$upscope $end
$scope module controleALU $end
$var wire 6 H Instruction [5:0] $end
$var wire 2 I ALUOp [1:0] $end
$var reg 4 J Operation [3:0] $end
$upscope $end
$scope module controleLogico $end
$var wire 6 K opcode [5:0] $end
$var reg 2 L ALUOp [1:0] $end
$var reg 1 < ALUSrc $end
$var reg 1 : Branch $end
$var reg 1 6 Jump $end
$var reg 1 5 MemRead $end
$var reg 1 4 MemWrite $end
$var reg 1 1 MemtoReg $end
$var reg 1 . RegDst $end
$var reg 1 - RegWrite $end
$upscope $end
$scope module extensor $end
$var wire 16 M in [15:0] $end
$var wire 32 N out [31:0] $end
$upscope $end
$scope module memoria $end
$var wire 32 O addr [31:0] $end
$var wire 32 P instrucao [31:0] $end
$upscope $end
$scope module memoriaDados $end
$var wire 1 5 MemRead $end
$var wire 1 4 MemWrite $end
$var wire 32 Q address [31:0] $end
$var wire 1 ! clk $end
$var wire 32 R writeData [31:0] $end
$var wire 32 S readData [31:0] $end
$var integer 32 T i [31:0] $end
$upscope $end
$scope module mux1 $end
$var wire 5 U A [4:0] $end
$var wire 5 V B [4:0] $end
$var wire 1 . S $end
$var reg 5 W Out [4:0] $end
$upscope $end
$scope module mux2 $end
$var wire 32 X B [31:0] $end
$var wire 1 < S $end
$var wire 32 Y A [31:0] $end
$var reg 32 Z Out [31:0] $end
$upscope $end
$scope module mux3 $end
$var wire 32 [ A [31:0] $end
$var wire 32 \ B [31:0] $end
$var wire 1 1 S $end
$var reg 32 ] Out [31:0] $end
$upscope $end
$scope module mux4 $end
$var wire 32 ^ B [31:0] $end
$var wire 1 _ S $end
$var wire 32 ` A [31:0] $end
$var reg 32 a Out [31:0] $end
$upscope $end
$scope module mux5 $end
$var wire 32 b A [31:0] $end
$var wire 32 c B [31:0] $end
$var wire 1 6 S $end
$var reg 32 d Out [31:0] $end
$upscope $end
$scope module registradores $end
$var wire 32 e ReadData1 [31:0] $end
$var wire 32 f ReadData2 [31:0] $end
$var wire 5 g ReadRegister1 [4:0] $end
$var wire 5 h ReadRegister2 [4:0] $end
$var wire 1 - RegWrite $end
$var wire 32 i WriteData [31:0] $end
$var wire 5 j WriteRegister [4:0] $end
$var wire 1 ! clock $end
$var integer 32 k i [31:0] $end
$upscope $end
$scope module shift $end
$var wire 32 l in [31:0] $end
$var wire 32 m out [31:0] $end
$upscope $end
$scope module shift_jump $end
$var wire 26 n in [25:0] $end
$var wire 28 o out [27:0] $end
$upscope $end
$scope module soma_pc $end
$var wire 32 p A [31:0] $end
$var wire 4 q ALUOperation [3:0] $end
$var wire 32 r B [31:0] $end
$var wire 1 s Zero $end
$var reg 32 t ALUResult [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulacao $end
$scope module mips $end
$scope module registradores $end
$var reg 32 u \registers[0] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulacao $end
$scope module mips $end
$scope module registradores $end
$var reg 32 v \registers[1] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulacao $end
$scope module mips $end
$scope module registradores $end
$var reg 32 w \registers[2] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulacao $end
$scope module mips $end
$scope module registradores $end
$var reg 32 x \registers[3] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulacao $end
$scope module mips $end
$scope module registradores $end
$var reg 32 y \registers[4] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulacao $end
$scope module mips $end
$scope module registradores $end
$var reg 32 z \registers[5] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulacao $end
$scope module mips $end
$scope module registradores $end
$var reg 32 { \registers[6] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulacao $end
$scope module mips $end
$scope module registradores $end
$var reg 32 | \registers[7] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulacao $end
$scope module mips $end
$scope module registradores $end
$var reg 32 } \registers[8] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulacao $end
$scope module mips $end
$scope module registradores $end
$var reg 32 ~ \registers[9] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulacao $end
$scope module mips $end
$scope module registradores $end
$var reg 32 !" \registers[10] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulacao $end
$scope module mips $end
$scope module registradores $end
$var reg 32 "" \registers[11] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulacao $end
$scope module mips $end
$scope module registradores $end
$var reg 32 #" \registers[12] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulacao $end
$scope module mips $end
$scope module registradores $end
$var reg 32 $" \registers[13] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulacao $end
$scope module mips $end
$scope module registradores $end
$var reg 32 %" \registers[14] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulacao $end
$scope module mips $end
$scope module registradores $end
$var reg 32 &" \registers[15] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulacao $end
$scope module mips $end
$scope module registradores $end
$var reg 32 '" \registers[16] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulacao $end
$scope module mips $end
$scope module registradores $end
$var reg 32 (" \registers[17] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulacao $end
$scope module mips $end
$scope module registradores $end
$var reg 32 )" \registers[18] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulacao $end
$scope module mips $end
$scope module registradores $end
$var reg 32 *" \registers[19] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulacao $end
$scope module mips $end
$scope module registradores $end
$var reg 32 +" \registers[20] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulacao $end
$scope module mips $end
$scope module registradores $end
$var reg 32 ," \registers[21] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulacao $end
$scope module mips $end
$scope module registradores $end
$var reg 32 -" \registers[22] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulacao $end
$scope module mips $end
$scope module registradores $end
$var reg 32 ." \registers[23] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulacao $end
$scope module mips $end
$scope module registradores $end
$var reg 32 /" \registers[24] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulacao $end
$scope module mips $end
$scope module registradores $end
$var reg 32 0" \registers[25] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulacao $end
$scope module mips $end
$scope module registradores $end
$var reg 32 1" \registers[26] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulacao $end
$scope module mips $end
$scope module registradores $end
$var reg 32 2" \registers[27] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulacao $end
$scope module mips $end
$scope module registradores $end
$var reg 32 3" \registers[28] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulacao $end
$scope module mips $end
$scope module registradores $end
$var reg 32 4" \registers[29] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulacao $end
$scope module mips $end
$scope module registradores $end
$var reg 32 5" \registers[30] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Simulacao $end
$scope module mips $end
$scope module registradores $end
$var reg 32 6" \registers[31] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b0 6"
b0 5"
b0 4"
b0 3"
b0 2"
b0 1"
b0 0"
b0 /"
b0 ."
b0 -"
b0 ,"
b0 +"
b0 *"
b0 )"
b0 ("
b0 '"
b0 &"
b0 %"
b0 $"
b0 #"
b0 ""
b0 !"
b0 ~
b0 }
b0 |
b0 {
b0 z
b0 y
b0 x
b0 w
b0 v
b0 u
bx t
xs
b100 r
b10 q
bx p
bx00 o
bx n
bx00 m
bx l
b100000 k
bx j
bx i
bx h
bx g
bx f
bx e
b0 d
bx00 c
bx b
bx a
bx `
x_
bx ^
bx ]
bx \
bx [
bx Z
bx Y
bx X
bx W
bx V
bx U
b100000000 T
bx S
bx R
bx Q
bx P
bx O
bx N
bx M
bx L
bx K
bx J
bx I
bx H
bx G
bx F
bx E
bx D
bx C
bx00 B
xA
b10 @
bx ?
bx >
bx =
x<
bx ;
x:
x9
bx 8
bx 7
x6
x5
x4
bx 3
bx 2
x1
bx 0
bx /
x.
x-
bx ,
bx +
bx *
bx )
bx (
b0 '
bx &
bx00 %
bx00 $
b100000 #
0"
0!
$end
#5
0A
b100 '
b100 d
b10000000 ;
b10000000 C
b10000000 ^
b0 2
b0 S
b0 \
09
0_
b100000 *
b100000 ]
b100000 i
b1000000000000010000000 $
b1000000000000010000000 o
b10 7
b10 E
b10 J
b10000000 %
b10000000 B
b10000000 m
b100000 =
b100000 D
b100000 Z
b100000 3
b100000 G
b100000 Q
b100000 [
b1000 )
b1000 W
b1000 j
0:
06
01
1-
b11 8
b11 I
b11 L
1<
0.
b10000000000000100000 n
b100000 H
b100000 &
b100000 N
b100000 X
b100000 l
b100000 M
b0 +
b0 R
b0 Y
b0 f
b1000 h
b0 ,
b0 F
b0 e
b0 g
b0 V
b1000 U
b1000 K
0s
b1000000000000010000000 c
b100 0
b100 a
b100 b
b100000000010000000000000100000 (
b100000000010000000000000100000 P
b100 /
b100 `
b100 t
b0 >
b0 ?
b0 O
b0 p
1!
#10
0!
1"
#15
b100000 }
b100000 +
b100000 R
b100000 Y
b100000 f
1!
#20
0!
0"
#25
b10000 *
b10000 ]
b10000 i
b10000 3
b10000 G
b10000 Q
b10000 [
b1001000000000001000000 c
b1001000000000001000000 $
b1001000000000001000000 o
b1000000 %
b1000000 B
b1000000 m
b10000 =
b10000 D
b10000 Z
b1001 )
b1001 W
b1001 j
b1000 '
b1000 d
b10010000000000010000 n
b10000 H
b10000 &
b10000 N
b10000 X
b10000 l
b10000 M
b0 +
b0 R
b0 Y
b0 f
b1001 h
b1001 U
b1000 0
b1000 a
b1000 b
b1000100 ;
b1000100 C
b1000100 ^
b100000000010010000000000010000 (
b100000000010010000000000010000 P
b1000 /
b1000 `
b1000 t
b100000 }
b100 >
b100 ?
b100 O
b100 p
1!
#30
0!
#35
b110000 *
b110000 ]
b110000 i
b100001001010100000010000000 c
b100001001010100000010000000 $
b100001001010100000010000000 o
b10100000010000000 %
b10100000010000000 B
b10100000010000000 m
b110000 3
b110000 G
b110000 Q
b110000 [
b1010 )
b1010 W
b1010 j
b10 8
b10 I
b10 L
04
05
0<
1.
b1100 '
b1100 d
b1000010010101000000100000 n
b100000 H
b101000000100000 &
b101000000100000 N
b101000000100000 X
b101000000100000 l
b101000000100000 M
b100000 ,
b100000 F
b100000 e
b1000 g
b1010 V
b0 K
b1100 0
b1100 a
b1100 b
b10100000010001000 ;
b10100000010001000 C
b10100000010001000 ^
b1000010010101000000100000 (
b1000010010101000000100000 P
b1100 /
b1100 `
b1100 t
b10000 ~
b10000 +
b10000 R
b10000 Y
b10000 f
b1000 >
b1000 ?
b1000 O
b1000 p
1!
#40
0!
#45
b10000 *
b10000 ]
b10000 i
b10000 3
b10000 G
b10000 Q
b10000 [
b100001001000000000000001100 c
b100001001000000000000001100 $
b100001001000000000000001100 o
b110 7
b110 E
b110 J
b1100 %
b1100 B
b1100 m
b0 )
b0 W
b0 j
b1 8
b1 I
b1 L
1:
0-
b10000 '
b10000 d
b1000010010000000000000011 n
b11 H
b11 &
b11 N
b11 X
b11 l
b11 M
b0 V
b100 K
b10000 0
b10000 a
b10000 b
b11000 ;
b11000 C
b11000 ^
b10001000010010000000000000011 (
b10001000010010000000000000011 P
b10000 /
b10000 `
b10000 t
b110000 !"
b1100 >
b1100 ?
b1100 O
b1100 p
1!
#50
0!
#55
09
b11000 *
b11000 ]
b11000 i
b1001 )
b1001 W
b1001 j
b100101001000000000000100000 c
b100101001000000000000100000 $
b100101001000000000000100000 o
b10 7
b10 E
b10 J
b100000 %
b100000 B
b100000 m
b1000 =
b1000 D
b1000 Z
b11000 3
b11000 G
b11000 Q
b11000 [
0:
1-
b11 8
b11 I
b11 L
1<
0.
b10100 '
b10100 d
b1001010010000000000001000 n
b1000 H
b1000 &
b1000 N
b1000 X
b1000 l
b1000 M
b10000 ,
b10000 F
b10000 e
b1001 g
b1000 K
b10100 0
b10100 a
b10100 b
b110000 ;
b110000 C
b110000 ^
b100001001010010000000000001000 (
b100001001010010000000000001000 P
b10100 /
b10100 `
b10100 t
b10000 >
b10000 ?
b10000 O
b10000 p
1!
#60
0!
#65
19
b1100 c
b1100 $
b1100 o
b1100 %
b1100 B
b1100 m
b0 =
b0 D
b0 Z
b0 )
b0 W
b0 j
b0 8
b0 I
b0 L
16
0-
0<
b1100 '
b1100 d
b0 *
b0 ]
b0 i
b11 n
b11 H
b11 &
b11 N
b11 X
b11 l
b11 M
b0 h
b0 g
b0 U
b10 K
b11000 0
b11000 a
b11000 b
b0 3
b0 G
b0 Q
b0 [
b100000 ;
b100000 C
b100000 ^
b1000000000000000000000000011 (
b1000000000000000000000000011 P
b11000 /
b11000 `
b11000 t
b11000 ~
b0 ,
b0 F
b0 e
b0 +
b0 R
b0 Y
b0 f
b10100 >
b10100 ?
b10100 O
b10100 p
1!
#70
0!
#75
09
b1000 *
b1000 ]
b1000 i
b110 7
b110 E
b110 J
b10000 '
b10000 d
0_
b100001001000000000000001100 c
b100001001000000000000001100 $
b100001001000000000000001100 o
b11000 =
b11000 D
b11000 Z
b1000 3
b1000 G
b1000 Q
b1000 [
b1001 )
b1001 W
b1001 j
b1 8
b1 I
b1 L
06
1:
b1000010010000000000000011 n
b11000 +
b11000 R
b11000 Y
b11000 f
b1001 h
b100000 ,
b100000 F
b100000 e
b1000 g
b1001 U
b100 K
b10000 0
b10000 a
b10000 b
b11000 ;
b11000 C
b11000 ^
b10001000010010000000000000011 (
b10001000010010000000000000011 P
b10000 /
b10000 `
b10000 t
b1100 >
b1100 ?
b1100 O
b1100 p
1!
#80
0!
#85
09
b100000 *
b100000 ]
b100000 i
b100101001000000000000100000 c
b100101001000000000000100000 $
b100101001000000000000100000 o
b10 7
b10 E
b10 J
b100000 %
b100000 B
b100000 m
b1000 =
b1000 D
b1000 Z
b100000 3
b100000 G
b100000 Q
b100000 [
0:
1-
b11 8
b11 I
b11 L
1<
b10100 '
b10100 d
b1001010010000000000001000 n
b1000 H
b1000 &
b1000 N
b1000 X
b1000 l
b1000 M
b11000 ,
b11000 F
b11000 e
b1001 g
b1000 K
b10100 0
b10100 a
b10100 b
b110000 ;
b110000 C
b110000 ^
b100001001010010000000000001000 (
b100001001010010000000000001000 P
b10100 /
b10100 `
b10100 t
b10000 >
b10000 ?
b10000 O
b10000 p
1!
#90
0!
#95
19
b1100 c
b1100 $
b1100 o
b1100 %
b1100 B
b1100 m
b0 =
b0 D
b0 Z
b0 )
b0 W
b0 j
b0 8
b0 I
b0 L
16
0-
0<
b1100 '
b1100 d
b0 *
b0 ]
b0 i
b11 n
b11 H
b11 &
b11 N
b11 X
b11 l
b11 M
b0 h
b0 g
b0 U
b10 K
b11000 0
b11000 a
b11000 b
b0 3
b0 G
b0 Q
b0 [
b100000 ;
b100000 C
b100000 ^
b1000000000000000000000000011 (
b1000000000000000000000000011 P
b11000 /
b11000 `
b11000 t
b100000 ~
b0 ,
b0 F
b0 e
b0 +
b0 R
b0 Y
b0 f
b10100 >
b10100 ?
b10100 O
b10100 p
1!
#100
0!
#105
19
b0 *
b0 ]
b0 i
b110 7
b110 E
b110 J
b11000 '
b11000 d
1_
b100001001000000000000001100 c
b100001001000000000000001100 $
b100001001000000000000001100 o
b100000 =
b100000 D
b100000 Z
b0 3
b0 G
b0 Q
b0 [
b1001 )
b1001 W
b1001 j
b1 8
b1 I
b1 L
06
1:
b1000010010000000000000011 n
b100000 +
b100000 R
b100000 Y
b100000 f
b1001 h
b100000 ,
b100000 F
b100000 e
b1000 g
b1001 U
b100 K
b11000 0
b11000 a
b11000 b
b11000 ;
b11000 C
b11000 ^
b10001000010010000000000000011 (
b10001000010010000000000000011 P
b10000 /
b10000 `
b10000 t
b1100 >
b1100 ?
b1100 O
b1100 p
1!
#110
0!
#115
09
b100000 *
b100000 ]
b100000 i
b100000 3
b100000 G
b100000 Q
b100000 [
0_
b100101000010100000010010000 c
b100101000010100000010010000 $
b100101000010100000010010000 o
b0 7
b0 E
b0 J
b10100000010010000 %
b10100000010010000 B
b10100000010010000 m
b1010 )
b1010 W
b1010 j
b10 8
b10 I
b10 L
0:
1-
1.
b11100 '
b11100 d
b1001010000101000000100100 n
b100100 H
b101000000100100 &
b101000000100100 N
b101000000100100 X
b101000000100100 l
b101000000100100 M
b1000 h
b1001 g
b1010 V
b1000 U
b0 K
b11100 0
b11100 a
b11100 b
b10100000010101000 ;
b10100000010101000 C
b10100000010101000 ^
b1001010000101000000100100 (
b1001010000101000000100100 P
b11100 /
b11100 `
b11100 t
b11000 >
b11000 ?
b11000 O
b11000 p
1!
#120
0!
#125
xA
x9
bx *
bx ]
bx i
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 c
bx00 $
bx00 o
b10 7
b10 E
b10 J
bx00 %
bx00 B
bx00 m
bx =
bx D
bx Z
bx 3
bx G
bx Q
bx [
bx )
bx W
bx j
b0 8
b0 I
b0 L
0-
0.
b100000 '
b100000 d
bx n
bx H
bx &
bx N
bx X
bx l
bx M
bx +
bx R
bx Y
bx f
bx h
bx ,
bx F
bx e
bx g
bx V
bx U
bx K
b100000 0
b100000 a
b100000 b
bx ;
bx C
bx ^
bx (
bx P
b100000 /
b100000 `
b100000 t
b100000 !"
b11100 >
b11100 ?
b11100 O
b11100 p
1!
#130
0!
#135
b100100 '
b100100 d
b100100 0
b100100 a
b100100 b
b100100 /
b100100 `
b100100 t
b100000 >
b100000 ?
b100000 O
b100000 p
1!
#140
0!
