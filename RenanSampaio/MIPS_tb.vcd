$date
	Fri Apr 11 10:42:57 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module MIPS_tb $end
$var reg 1 ! clk $end
$var reg 1 " reset $end
$scope module uut $end
$var wire 1 # RegDst $end
$var wire 1 ! clk $end
$var wire 32 $ nextPc [31:0] $end
$var wire 1 " reset $end
$var wire 1 % zero $end
$var wire 32 & writeData [31:0] $end
$var wire 32 ' signExtendOut [31:0] $end
$var wire 32 ( shiftLeft2Out [31:0] $end
$var wire 1 ) regWrite $end
$var wire 1 * regDst $end
$var wire 32 + pc [31:0] $end
$var wire 5 , muxRegDstOut [4:0] $end
$var wire 32 - muxAddOut [31:0] $end
$var wire 32 . muxALUOut [31:0] $end
$var wire 1 / memtoReg $end
$var wire 1 0 memWrite $end
$var wire 1 1 memRead $end
$var wire 32 2 instrucao [31:0] $end
$var wire 32 3 dataMemoryOut [31:0] $end
$var wire 1 4 branch $end
$var wire 1 5 aluSrc $end
$var wire 32 6 aluResult [31:0] $end
$var wire 2 7 aluOp [1:0] $end
$var wire 4 8 aluControlSignal [3:0] $end
$var wire 32 9 add4out [31:0] $end
$var wire 32 : add32Result [31:0] $end
$var wire 32 ; ReadData2 [31:0] $end
$var wire 32 < ReadData1 [31:0] $end
$scope module add4 $end
$var wire 32 = out [31:0] $end
$var wire 32 > in [31:0] $end
$upscope $end
$scope module adder $end
$var wire 32 ? a [31:0] $end
$var wire 32 @ sum [31:0] $end
$var wire 32 A b [31:0] $end
$upscope $end
$scope module alu $end
$var wire 1 % Zero $end
$var wire 32 B B [31:0] $end
$var wire 4 C ALUOperation [3:0] $end
$var wire 32 D A [31:0] $end
$var reg 32 E ALUResult [31:0] $end
$upscope $end
$scope module aluControl $end
$var wire 6 F funct [5:0] $end
$var wire 2 G ALUOp [1:0] $end
$var reg 4 H ALUControl [3:0] $end
$upscope $end
$scope module control $end
$var wire 6 I Op [5:0] $end
$var reg 2 J ALUOp [1:0] $end
$var reg 1 5 ALUSrc $end
$var reg 1 4 Branch $end
$var reg 1 1 MemRead $end
$var reg 1 0 MemWrite $end
$var reg 1 / MemtoReg $end
$var reg 1 * RegDst $end
$var reg 1 ) RegWrite $end
$upscope $end
$scope module dataMem $end
$var wire 1 1 MemRead $end
$var wire 1 0 MemWrite $end
$var wire 32 K address [31:0] $end
$var wire 1 ! clk $end
$var wire 32 L writeData [31:0] $end
$var wire 32 M readData [31:0] $end
$var integer 32 N i [31:0] $end
$upscope $end
$scope module memoriaInstrucoes $end
$var wire 32 O instrucao [31:0] $end
$var wire 32 P addr [31:0] $end
$var integer 32 Q i [31:0] $end
$upscope $end
$scope module muxALU $end
$var wire 1 5 seletor $end
$var wire 32 R out [31:0] $end
$var wire 32 S in1 [31:0] $end
$var wire 32 T in0 [31:0] $end
$upscope $end
$scope module muxAdd $end
$var wire 32 U in0 [31:0] $end
$var wire 32 V in1 [31:0] $end
$var wire 1 W seletor $end
$var wire 32 X out [31:0] $end
$upscope $end
$scope module muxMem $end
$var wire 32 Y in0 [31:0] $end
$var wire 32 Z in1 [31:0] $end
$var wire 1 / seletor $end
$var wire 32 [ out [31:0] $end
$upscope $end
$scope module muxRegDst $end
$var wire 5 \ in0 [4:0] $end
$var wire 5 ] in1 [4:0] $end
$var wire 1 # seletor $end
$var wire 5 ^ out [4:0] $end
$upscope $end
$scope module pcModulo $end
$var wire 1 ! clk $end
$var wire 32 _ nextPc [31:0] $end
$var wire 1 " reset $end
$var reg 32 ` pc [31:0] $end
$upscope $end
$scope module regModulo $end
$var wire 32 a ReadData1 [31:0] $end
$var wire 32 b ReadData2 [31:0] $end
$var wire 5 c ReadRegister1 [4:0] $end
$var wire 5 d ReadRegister2 [4:0] $end
$var wire 1 ) RegWrite $end
$var wire 32 e WriteData [31:0] $end
$var wire 5 f WriteRegister [4:0] $end
$var integer 32 g i [31:0] $end
$upscope $end
$scope module shiftLeft2 $end
$var wire 32 h out [31:0] $end
$var wire 32 i in [31:0] $end
$upscope $end
$scope module signExt $end
$var wire 16 j in [15:0] $end
$var wire 32 k out [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b101 k
b101 j
b101 i
b10100 h
b100000 g
b0x000 f
b0 e
b1000 d
b0 c
b0 b
b0 a
b0 `
b100 _
b0x000 ^
b0 ]
b1000 \
b0 [
b0 Z
b0 Y
b100 X
0W
b11000 V
b100 U
b0 T
b101 S
b0 R
b100000000 Q
b0 P
b100000000010000000000000000101 O
b100000000 N
b0 M
b0 L
b0 K
b0 J
b1000 I
b10 H
b0 G
b101 F
b0 E
b0 D
b10 C
b0 B
b10100 A
b11000 @
b100 ?
b0 >
b100 =
b0 <
b0 ;
b11000 :
b100 9
b10 8
b0 7
b0 6
05
04
b0 3
b100000000010000000000000000101 2
01
00
0/
b0 .
b100 -
b0x000 ,
b0 +
0*
0)
b10100 (
b101 '
b0 &
1%
b100 $
z#
1"
0!
$end
#5
1!
#10
0!
0"
#15
b1100 (
b1100 A
b1100 h
b0x00x ,
b0x00x ^
b0x00x f
b11 F
b11 '
b11 S
b11 i
b11 k
b11 j
b1001 d
b1001 \
b100000000010010000000000000011 2
b100000000010010000000000000011 O
b1000 $
b1000 _
b1000 -
b1000 X
b10100 :
b10100 @
b10100 V
b1000 9
b1000 =
b1000 ?
b1000 U
b100 +
b100 >
b100 P
b100 `
1!
#20
0!
#25
b10 7
b10 G
b10 J
1)
1*
b10100000010000000 (
b10100000010000000 A
b10100000010000000 h
b10xx ,
b10xx ^
b10xx f
b0 I
b100000 F
b101000000100000 '
b101000000100000 S
b101000000100000 i
b101000000100000 k
b101000000100000 j
b1000 c
b1010 ]
b1000010010101000000100000 2
b1000010010101000000100000 O
b1100 $
b1100 _
b1100 -
b1100 X
b10100000010001100 :
b10100000010001100 @
b10100000010001100 V
b1100 9
b1100 =
b1100 ?
b1100 U
b1000 +
b1000 >
b1000 P
b1000 `
1!
#30
0!
#35
b0 7
b0 G
b0 J
10
0)
x/
15
x*
b10 8
b10 C
b10 H
b0 (
b0 A
b0 h
b0x0x0 ,
b0x0x0 ^
b0x0x0 f
b101011 I
b0 F
b0 '
b0 S
b0 i
b0 k
b0 j
b1010 d
b0 c
b0 ]
b1010 \
b10101100000010100000000000000000 2
b10101100000010100000000000000000 O
b10000 $
b10000 _
b10000 -
b10000 X
b10000 :
b10000 @
b10000 V
b10000 9
b10000 =
b10000 ?
b10000 U
b1100 +
b1100 >
b1100 P
b1100 `
1!
#40
0!
#45
1%
b0 &
b0 [
b0 e
b110 8
b110 C
b110 H
1W
b0 6
b0 E
b0 K
b0 Y
b1 7
b1 G
b1 J
14
00
05
b100 (
b100 A
b100 h
b0 .
b0 B
b0 R
b0 ,
b0 ^
b0 f
b100 I
b1 F
b1 '
b1 S
b1 i
b1 k
b1 j
b0 d
b1010 c
b0 \
b10001010000000000000000000001 2
b10001010000000000000000000001 O
b11000 $
b11000 _
b11000 -
b11000 X
b11000 :
b11000 @
b11000 V
b10100 9
b10100 =
b10100 ?
b10100 U
b10000 +
b10000 >
b10000 P
b10000 `
1!
#50
0!
#55
b10 8
b10 C
b10 H
0W
b0 7
b0 G
b0 J
04
11
1)
1/
15
0*
b0 (
b0 A
b0 h
b0xx00 ,
b0xx00 ^
b0xx00 f
b100011 I
b0 F
b0 '
b0 S
b0 i
b0 k
b0 j
b1100 d
b0 c
b1100 \
b10001100000011000000000000000000 2
b10001100000011000000000000000000 O
b11100 $
b11100 _
b11100 -
b11100 X
b11100 :
b11100 @
b11100 V
b11100 9
b11100 =
b11100 ?
b11100 U
b11000 +
b11000 >
b11000 P
b11000 `
1!
#60
0!
#65
bx 8
bx C
bx H
b10 7
b10 G
b10 J
01
0/
05
1*
b0 ,
b0 ^
b0 f
b0 I
b0 d
b0 \
b0 2
b0 O
b100000 $
b100000 _
b100000 -
b100000 X
b100000 :
b100000 @
b100000 V
b100000 9
b100000 =
b100000 ?
b100000 U
b11100 +
b11100 >
b11100 P
b11100 `
1!
#70
0!
#75
b100100 $
b100100 _
b100100 -
b100100 X
b100100 :
b100100 @
b100100 V
b100100 9
b100100 =
b100100 ?
b100100 U
b100000 +
b100000 >
b100000 P
b100000 `
1!
#80
0!
#85
b101000 $
b101000 _
b101000 -
b101000 X
b101000 :
b101000 @
b101000 V
b101000 9
b101000 =
b101000 ?
b101000 U
b100100 +
b100100 >
b100100 P
b100100 `
1!
#90
0!
#95
b101100 $
b101100 _
b101100 -
b101100 X
b101100 :
b101100 @
b101100 V
b101100 9
b101100 =
b101100 ?
b101100 U
b101000 +
b101000 >
b101000 P
b101000 `
1!
#100
0!
#105
b110000 $
b110000 _
b110000 -
b110000 X
b110000 :
b110000 @
b110000 V
b110000 9
b110000 =
b110000 ?
b110000 U
b101100 +
b101100 >
b101100 P
b101100 `
1!
#110
0!
#115
b110100 $
b110100 _
b110100 -
b110100 X
b110100 :
b110100 @
b110100 V
b110100 9
b110100 =
b110100 ?
b110100 U
b110000 +
b110000 >
b110000 P
b110000 `
1!
#120
0!
#125
b111000 $
b111000 _
b111000 -
b111000 X
b111000 :
b111000 @
b111000 V
b111000 9
b111000 =
b111000 ?
b111000 U
b110100 +
b110100 >
b110100 P
b110100 `
1!
#130
0!
#135
b111100 $
b111100 _
b111100 -
b111100 X
b111100 :
b111100 @
b111100 V
b111100 9
b111100 =
b111100 ?
b111100 U
b111000 +
b111000 >
b111000 P
b111000 `
1!
#140
0!
#145
b1000000 $
b1000000 _
b1000000 -
b1000000 X
b1000000 :
b1000000 @
b1000000 V
b1000000 9
b1000000 =
b1000000 ?
b1000000 U
b111100 +
b111100 >
b111100 P
b111100 `
1!
#150
0!
#155
b1000100 $
b1000100 _
b1000100 -
b1000100 X
b1000100 :
b1000100 @
b1000100 V
b1000100 9
b1000100 =
b1000100 ?
b1000100 U
b1000000 +
b1000000 >
b1000000 P
b1000000 `
1!
#160
0!
#165
b1001000 $
b1001000 _
b1001000 -
b1001000 X
b1001000 :
b1001000 @
b1001000 V
b1001000 9
b1001000 =
b1001000 ?
b1001000 U
b1000100 +
b1000100 >
b1000100 P
b1000100 `
1!
#170
0!
#175
b1001100 $
b1001100 _
b1001100 -
b1001100 X
b1001100 :
b1001100 @
b1001100 V
b1001100 9
b1001100 =
b1001100 ?
b1001100 U
b1001000 +
b1001000 >
b1001000 P
b1001000 `
1!
#180
0!
#185
b1010000 $
b1010000 _
b1010000 -
b1010000 X
b1010000 :
b1010000 @
b1010000 V
b1010000 9
b1010000 =
b1010000 ?
b1010000 U
b1001100 +
b1001100 >
b1001100 P
b1001100 `
1!
#190
0!
#195
b1010100 $
b1010100 _
b1010100 -
b1010100 X
b1010100 :
b1010100 @
b1010100 V
b1010100 9
b1010100 =
b1010100 ?
b1010100 U
b1010000 +
b1010000 >
b1010000 P
b1010000 `
1!
#200
0!
#205
b1011000 $
b1011000 _
b1011000 -
b1011000 X
b1011000 :
b1011000 @
b1011000 V
b1011000 9
b1011000 =
b1011000 ?
b1011000 U
b1010100 +
b1010100 >
b1010100 P
b1010100 `
1!
#210
0!
