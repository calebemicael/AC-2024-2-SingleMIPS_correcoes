$date
	Sun Feb 16 23:20:09 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module testbench_mips $end
$var reg 1 ! clk $end
$var reg 1 " reset $end
$scope module UUT $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var wire 5 # write_reg [4:0] $end
$var wire 32 $ write_data [31:0] $end
$var wire 32 % read_data2 [31:0] $end
$var wire 32 & read_data1 [31:0] $end
$var wire 32 ' pc_proximo [31:0] $end
$var wire 32 ( pc_atual [31:0] $end
$var wire 32 ) mem_dados [31:0] $end
$var wire 32 * jump_addr [31:0] $end
$var wire 32 + instrucao [31:0] $end
$var wire 32 , imediato_ext [31:0] $end
$var wire 32 - branch_target [31:0] $end
$var wire 32 . alu_resultado [31:0] $end
$var wire 32 / alu_operand2 [31:0] $end
$var wire 1 0 Zero $end
$var wire 1 1 RegWrite $end
$var wire 1 2 RegDst $end
$var wire 1 3 MemtoReg $end
$var wire 1 4 MemWrite $end
$var wire 1 5 MemRead $end
$var wire 1 6 Jump $end
$var wire 1 7 Branch $end
$var wire 1 8 ALUSrc $end
$var wire 2 9 ALUOp [1:0] $end
$var wire 4 : ALUControl [3:0] $end
$scope module ALU_CTRL $end
$var wire 6 ; funct [5:0] $end
$var wire 2 < ALUOp [1:0] $end
$var reg 4 = ALUControl [3:0] $end
$upscope $end
$scope module ALU_MOD $end
$var wire 4 > ALUControl [3:0] $end
$var wire 32 ? B [31:0] $end
$var wire 32 @ A [31:0] $end
$var reg 32 A Result [31:0] $end
$var reg 1 0 Zero $end
$upscope $end
$scope module CTRL $end
$var wire 6 B opcode [5:0] $end
$var reg 2 C ALUOp [1:0] $end
$var reg 1 8 ALUSrc $end
$var reg 1 7 Branch $end
$var reg 1 6 Jump $end
$var reg 1 5 MemRead $end
$var reg 1 4 MemWrite $end
$var reg 1 3 MemtoReg $end
$var reg 1 2 RegDst $end
$var reg 1 1 RegWrite $end
$upscope $end
$scope module EXT $end
$var wire 16 D imediato [15:0] $end
$var wire 32 E imediato_ext [31:0] $end
$upscope $end
$scope module JUMP_MOD $end
$var wire 26 F instr_target [25:0] $end
$var wire 32 G pc_atual [31:0] $end
$var wire 32 H jump_addr [31:0] $end
$upscope $end
$scope module MEM_DADOS $end
$var wire 1 5 MemRead $end
$var wire 1 4 MemWrite $end
$var wire 1 ! clk $end
$var wire 32 I endereco [31:0] $end
$var wire 32 J write_data [31:0] $end
$var reg 32 K read_data [31:0] $end
$var integer 32 L i [31:0] $end
$upscope $end
$scope module MEM_INST $end
$var wire 32 M endereco [31:0] $end
$var reg 32 N instrucao [31:0] $end
$upscope $end
$scope module PC $end
$var wire 1 7 Branch $end
$var wire 1 6 Jump $end
$var wire 1 0 Zero $end
$var wire 32 O branch_target [31:0] $end
$var wire 1 ! clk $end
$var wire 32 P jump_addr [31:0] $end
$var wire 1 " reset $end
$var wire 32 Q pc_next [31:0] $end
$var reg 32 R pc [31:0] $end
$upscope $end
$scope module REGISTROS $end
$var wire 1 1 RegWrite $end
$var wire 1 ! clk $end
$var wire 5 S read_reg1 [4:0] $end
$var wire 5 T read_reg2 [4:0] $end
$var wire 32 U write_data [31:0] $end
$var wire 5 V write_reg [4:0] $end
$var reg 32 W read_data1 [31:0] $end
$var reg 32 X read_data2 [31:0] $end
$var integer 32 Y i [31:0] $end
$upscope $end
$scope module SOMADOR $end
$var wire 32 Z pc_atual [31:0] $end
$var wire 32 [ pc_proximo [31:0] $end
$upscope $end
$upscope $end
$scope begin $ivl_for_loop0 $end
$var integer 32 \ i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop1 $end
$var integer 32 ] i [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
bx ]
bx \
b100 [
b0 Z
b100000 Y
b0 X
b0 W
b1 V
b1000 U
b1 T
b0 S
b0 R
b100 Q
b1000000000000100000 P
b100100 O
b100000000000010000000000001000 N
b0 M
b100000000 L
b0 K
b0 J
b1000 I
b1000000000000100000 H
b0 G
b10000000000001000 F
b1000 E
b1000 D
b0 C
b1000 B
b1000 A
b0 @
b1000 ?
b10 >
b10 =
b0 <
b1000 ;
b10 :
b0 9
18
07
06
05
04
03
02
11
00
b1000 /
b1000 .
b100100 -
b1000 ,
b100000000000010000000000001000 +
b1000000000000100000 *
b0 )
b0 (
b100 '
b0 &
b0 %
b1000 $
b1 #
1"
0!
$end
#10000
b1000 %
b1000 J
b1000 X
1!
#20000
0!
0"
#30000
b10000 $
b10000 U
b10000 .
b10000 A
b10000 I
b10000 /
b10000 ?
b0 %
b0 J
b0 X
b10 #
b10 V
b10000000000001000000 *
b10000000000001000000 H
b10000000000001000000 P
b100000000000010000 F
b10000 ;
b10000 ,
b10000 E
b10000 D
b10 T
b100000000000100000000000010000 +
b100000000000100000000000010000 N
b1001000 -
b1001000 O
b1000 '
b1000 Q
b1000 [
b100 (
b100 G
b100 M
b100 R
b100 Z
1!
#40000
0!
#50000
b11000 $
b11000 U
b11000 .
b11000 A
b11000 I
b11 #
b11 V
b1000 &
b1000 @
b1000 W
b10 9
b10 <
b10 C
08
12
b100010000110000010000000 *
b100010000110000010000000 H
b100010000110000010000000 P
b1000100001100000100000 F
b100000 ;
b1100000100000 ,
b1100000100000 E
b1100000100000 D
b1 S
b0 B
b10000 %
b10000 J
b10000 X
b1000100001100000100000 +
b1000100001100000100000 N
b110000010001100 -
b110000010001100 O
b1100 '
b1100 Q
b1100 [
b1000 (
b1000 G
b1000 M
b1000 R
b1000 Z
1!
#60000
0!
#70000
b1100 .
b1100 A
b1100 I
b0 $
b0 U
b100 /
b100 ?
b0 %
b0 J
b0 X
b100 #
b100 V
b0 9
b0 <
b0 C
15
13
18
02
b100100000000000000010000 *
b100100000000000000010000 H
b100100000000000000010000 P
b1001000000000000000100 F
b100 ;
b100 ,
b100 E
b100 D
b100 T
b100011 B
b10001100001001000000000000000100 +
b10001100001001000000000000000100 N
b100000 -
b100000 O
b10000 '
b10000 Q
b10000 [
b1100 (
b1100 G
b1100 M
b1100 R
b1100 Z
1!
#80000
0!
#90000
b10000 .
b10000 A
b10000 I
b10000 $
b10000 U
b1000 /
b1000 ?
b11000 %
b11000 J
b11000 X
b11 #
b11 V
14
05
01
03
b100011000000000000100000 *
b100011000000000000100000 H
b100011000000000000100000 P
b1000110000000000001000 F
b1000 ;
b1000 ,
b1000 E
b1000 D
b11 T
b101011 B
b10101100001000110000000000001000 +
b10101100001000110000000000001000 N
b110100 -
b110100 O
b10100 '
b10100 Q
b10100 [
b10000 (
b10000 G
b10000 M
b10000 R
b10000 Z
1!
#100000
0!
#110000
b11000 $
b11000 U
b11000 .
b11000 A
b11000 I
b110 :
b110 =
b110 >
b0 /
b0 ?
b0 %
b0 J
b0 X
b11000 &
b11000 @
b11000 W
b100 #
b100 V
b1 9
b1 <
b1 C
17
04
08
b1100100000000000000000100 *
b1100100000000000000000100 H
b1100100000000000000000100 P
b11001000000000000000001 F
b1 ;
b1 ,
b1 E
b1 D
b100 T
b11 S
b100 B
b10000011001000000000000000001 +
b10000011001000000000000000001 N
b11100 -
b11100 O
b11000 '
b11000 Q
b11000 [
b10100 (
b10100 G
b10100 M
b10100 R
b10100 Z
1!
#120000
0!
#130000
b1100011 $
b1100011 U
b1100011 .
b1100011 A
b1100011 I
b1100011 /
b1100011 ?
b10 :
b10 =
b10 >
b0 &
b0 @
b0 W
b101 #
b101 V
b0 9
b0 <
b0 C
07
11
18
b101000000000110001100 *
b101000000000110001100 H
b101000000000110001100 P
b1010000000001100011 F
b100011 ;
b1100011 ,
b1100011 E
b1100011 D
b101 T
b0 S
b1000 B
b100000000001010000000001100011 +
b100000000001010000000001100011 N
b110101000 -
b110101000 O
b11100 '
b11100 Q
b11100 [
b11000 (
b11000 G
b11000 M
b11000 R
b11000 Z
1!
#140000
0!
#150000
b0 $
b0 U
10
b0 .
b0 A
b0 I
b0 /
b0 ?
b0 #
b0 V
16
01
08
b111000 *
b111000 H
b111000 P
b1110 F
b1110 ;
b1110 ,
b1110 E
b1110 D
b0 T
b10 B
b0 %
b0 J
b0 X
b1000000000000000000000001110 +
b1000000000000000000000001110 N
b1011000 -
b1011000 O
b100000 '
b100000 Q
b100000 [
b11100 (
b11100 G
b11100 M
b11100 R
b11100 Z
1!
#160000
0!
#170000
b11 :
b11 =
b11 >
b10 9
b10 <
b10 C
06
11
12
b0 *
b0 H
b0 P
b0 F
b0 ;
b0 ,
b0 E
b0 D
b0 B
b0 +
b0 N
b111100 -
b111100 O
b111100 '
b111100 Q
b111100 [
b111000 (
b111000 G
b111000 M
b111000 R
b111000 Z
1!
#180000
0!
#190000
b1000000 -
b1000000 O
b1000000 '
b1000000 Q
b1000000 [
b111100 (
b111100 G
b111100 M
b111100 R
b111100 Z
1!
#200000
0!
#210000
b1000100 -
b1000100 O
b1000100 '
b1000100 Q
b1000100 [
b1000000 (
b1000000 G
b1000000 M
b1000000 R
b1000000 Z
1!
#220000
0!
#230000
b1001000 -
b1001000 O
b1001000 '
b1001000 Q
b1001000 [
b1000100 (
b1000100 G
b1000100 M
b1000100 R
b1000100 Z
1!
#240000
0!
#250000
b1001100 -
b1001100 O
b1001100 '
b1001100 Q
b1001100 [
b1001000 (
b1001000 G
b1001000 M
b1001000 R
b1001000 Z
1!
#260000
0!
#270000
b1010000 -
b1010000 O
b1010000 '
b1010000 Q
b1010000 [
b1001100 (
b1001100 G
b1001100 M
b1001100 R
b1001100 Z
1!
#280000
0!
#290000
b1010100 -
b1010100 O
b1010100 '
b1010100 Q
b1010100 [
b1010000 (
b1010000 G
b1010000 M
b1010000 R
b1010000 Z
1!
#300000
0!
#310000
b1011000 -
b1011000 O
b1011000 '
b1011000 Q
b1011000 [
b1010100 (
b1010100 G
b1010100 M
b1010100 R
b1010100 Z
1!
#320000
0!
#330000
b1011100 -
b1011100 O
b1011100 '
b1011100 Q
b1011100 [
b1011000 (
b1011000 G
b1011000 M
b1011000 R
b1011000 Z
1!
#340000
0!
#350000
b1100000 -
b1100000 O
b1100000 '
b1100000 Q
b1100000 [
b1011100 (
b1011100 G
b1011100 M
b1011100 R
b1011100 Z
1!
#360000
0!
#370000
b1100100 -
b1100100 O
b1100100 '
b1100100 Q
b1100100 [
b1100000 (
b1100000 G
b1100000 M
b1100000 R
b1100000 Z
1!
#380000
0!
#390000
b1101000 -
b1101000 O
b1101000 '
b1101000 Q
b1101000 [
b1100100 (
b1100100 G
b1100100 M
b1100100 R
b1100100 Z
1!
#400000
0!
#410000
b1101100 -
b1101100 O
b1101100 '
b1101100 Q
b1101100 [
b1101000 (
b1101000 G
b1101000 M
b1101000 R
b1101000 Z
1!
#420000
0!
b100000000 ]
b100000 \
#430000
b1110000 -
b1110000 O
b1110000 '
b1110000 Q
b1110000 [
b1101100 (
b1101100 G
b1101100 M
b1101100 R
b1101100 Z
1!
#440000
0!
#450000
b1110100 -
b1110100 O
b1110100 '
b1110100 Q
b1110100 [
b1110000 (
b1110000 G
b1110000 M
b1110000 R
b1110000 Z
1!
#460000
0!
#470000
b1111000 -
b1111000 O
b1111000 '
b1111000 Q
b1111000 [
b1110100 (
b1110100 G
b1110100 M
b1110100 R
b1110100 Z
1!
#480000
0!
#490000
b1111100 -
b1111100 O
b1111100 '
b1111100 Q
b1111100 [
b1111000 (
b1111000 G
b1111000 M
b1111000 R
b1111000 Z
1!
#500000
0!
#510000
b10000000 -
b10000000 O
b10000000 '
b10000000 Q
b10000000 [
b1111100 (
b1111100 G
b1111100 M
b1111100 R
b1111100 Z
1!
#520000
0!
