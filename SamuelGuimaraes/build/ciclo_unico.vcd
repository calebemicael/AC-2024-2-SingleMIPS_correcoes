$date
	Sat Feb 08 00:45:07 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module Simulacao $end
$var wire 32 ! instrucao [31:0] $end
$var wire 32 " _fetchInstrucao [31:0] $end
$var wire 1 # _branch $end
$var wire 1 $ _ALUZero $end
$var reg 1 % clk $end
$var reg 1 & reset $end
$scope module ciclo_unico $end
$var wire 1 $ ALUZero $end
$var wire 1 # branch $end
$var wire 1 % clk $end
$var wire 32 ' fetchInstrucao [31:0] $end
$var wire 32 ( instrucao [31:0] $end
$var wire 32 ) _sign_extend [31:0] $end
$var wire 1 * _regWrite $end
$var wire 1 + _regDst $end
$var wire 32 , _readData2 [31:0] $end
$var wire 32 - _readData1 [31:0] $end
$var wire 32 . _readData [31:0] $end
$var wire 4 / _operacaoALU [3:0] $end
$var wire 32 0 _mux2 [31:0] $end
$var wire 32 1 _mux1 [31:0] $end
$var wire 5 2 _mux0 [4:0] $end
$var wire 1 3 _memtoReg $end
$var wire 1 4 _memWrite $end
$var wire 1 5 _memRead $end
$var wire 1 6 _branch $end
$var wire 1 7 _ALUZero $end
$var wire 1 8 _ALUSrc $end
$var wire 32 9 _ALUResult [31:0] $end
$var wire 1 : _ALUOp1 $end
$var wire 1 ; _ALUOp0 $end
$scope module alu $end
$var wire 1 7 Zero $end
$var wire 32 < B [31:0] $end
$var wire 4 = ALUOperation [3:0] $end
$var wire 32 > A [31:0] $end
$var reg 32 ? ALUResult [31:0] $end
$upscope $end
$scope module alu_control $end
$var wire 6 @ instrucao [5:0] $end
$var wire 4 A operacao [3:0] $end
$var wire 8 B auxiliarIn [7:0] $end
$var wire 1 : ALUOp1 $end
$var wire 1 ; ALUOp0 $end
$var reg 4 C auxiliarOut [3:0] $end
$upscope $end
$scope module data_memory $end
$var wire 32 D address [31:0] $end
$var wire 1 % clk $end
$var wire 32 E writeData [31:0] $end
$var wire 32 F readData [31:0] $end
$var wire 1 4 MemWrite $end
$var wire 1 5 MemRead $end
$var integer 32 G i [31:0] $end
$upscope $end
$scope module mux0 $end
$var wire 5 H A [4:0] $end
$var wire 5 I B [4:0] $end
$var wire 5 J Y [4:0] $end
$var wire 1 + seletor $end
$var reg 5 K auxiliarY [4:0] $end
$upscope $end
$scope module mux1 $end
$var wire 32 L Y [31:0] $end
$var wire 1 8 seletor $end
$var wire 32 M B [31:0] $end
$var wire 32 N A [31:0] $end
$var reg 32 O auxiliarY [31:0] $end
$upscope $end
$scope module mux2 $end
$var wire 32 P A [31:0] $end
$var wire 32 Q B [31:0] $end
$var wire 32 R Y [31:0] $end
$var wire 1 3 seletor $end
$var reg 32 S auxiliarY [31:0] $end
$upscope $end
$scope module registradores $end
$var wire 32 T ReadData1 [31:0] $end
$var wire 32 U ReadData2 [31:0] $end
$var wire 5 V ReadRegister1 [4:0] $end
$var wire 5 W ReadRegister2 [4:0] $end
$var wire 1 X RegWrite $end
$var wire 32 Y WriteData [31:0] $end
$var wire 5 Z WriteRegister [4:0] $end
$var integer 32 [ i [31:0] $end
$upscope $end
$scope module sign_extend $end
$var wire 16 \ in [15:0] $end
$var wire 32 ] out [31:0] $end
$upscope $end
$scope module unidade_controle $end
$var wire 6 ^ operacao [5:0] $end
$var wire 1 * regWrite $end
$var wire 1 + regDst $end
$var wire 1 3 memtoReg $end
$var wire 1 4 memWrite $end
$var wire 1 5 memRead $end
$var wire 1 6 branch $end
$var wire 1 8 ALUSrc $end
$var wire 1 : ALUOp1 $end
$var wire 1 ; ALUOp0 $end
$var reg 9 _ auxiliar [8:0] $end
$upscope $end
$upscope $end
$scope module fetch $end
$var wire 1 $ ALUZero $end
$var wire 1 ` _seletor_mux3 $end
$var wire 1 # branch $end
$var wire 1 % clk $end
$var wire 32 a fetchInstrucao [31:0] $end
$var wire 32 b pc_incrementado [31:0] $end
$var wire 1 & reset $end
$var wire 32 c instrucao [31:0] $end
$var wire 32 d _shift_left_0 [31:0] $end
$var wire 32 e _pc_add4 [31:0] $end
$var wire 32 f _mux3 [31:0] $end
$var wire 32 g _ALU_result [31:0] $end
$var reg 32 h pc [31:0] $end
$scope module alu_add $end
$var wire 4 i ALUOperation [3:0] $end
$var wire 1 j Zero $end
$var wire 32 k B [31:0] $end
$var wire 32 l A [31:0] $end
$var reg 32 m ALUResult [31:0] $end
$upscope $end
$scope module memoria $end
$var wire 32 n addr [31:0] $end
$var wire 32 o instrucao [31:0] $end
$var integer 32 p i [31:0] $end
$upscope $end
$scope module mux3 $end
$var wire 32 q B [31:0] $end
$var wire 1 ` seletor $end
$var wire 32 r Y [31:0] $end
$var wire 32 s A [31:0] $end
$var reg 32 t auxiliarY [31:0] $end
$upscope $end
$scope module shift_left_0 $end
$var wire 32 u in [31:0] $end
$var wire 32 v out [31:0] $end
$upscope $end
$scope module somador $end
$var wire 32 w in [31:0] $end
$var wire 32 x out [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
bx x
bx w
bx00 v
bx u
bx t
bx s
bx r
bx q
b100000000 p
bx o
bx n
bx m
bx l
bx00 k
xj
b10 i
bx h
bx g
bx f
bx e
bx00 d
bx c
bx b
bx a
x`
bx _
bx ^
bx ]
bx \
b100000 [
bx Z
bx Y
zX
bx W
bx V
bx U
bx T
bx S
bx R
bx Q
bx P
bx O
bx N
bx M
bx L
bx K
bx J
bx I
bx H
b100000000 G
bx F
bx E
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
x;
x:
bx 9
x8
x7
x6
x5
x4
x3
bx 2
bx 1
bx 0
bx /
bx .
bx -
bx ,
x+
x*
bx )
bx (
bx '
0&
0%
x$
x#
bx "
bx !
$end
#5
1%
#10
0j
b1000 g
b1000 m
b1000 q
b0 .
b0 F
b0 Q
0`
0$
07
b1 0
b1 R
b1 Y
b1 S
0+
18
03
1*
05
04
0#
06
0:
0;
b10 /
b10 =
b10 A
b10 C
b100 d
b100 k
b100 v
b1 1
b1 <
b1 L
b1 O
b1 9
b1 ?
b1 D
b1 P
b1000 2
b1000 J
b1000 Z
b1000 K
b10100000 _
b1 B
b1 @
b1 "
b1 '
b1 a
b1 u
b1 )
b1 M
b1 ]
b1 \
b0 ,
b0 E
b0 N
b0 U
b1000 W
b0 -
b0 >
b0 T
b0 V
b0 I
b1000 H
b1000 ^
b100000000010000000000000000001 !
b100000000010000000000000000001 (
b100000000010000000000000000001 c
b100000000010000000000000000001 o
b100 b
b100 f
b100 r
b100 t
b100 e
b100 l
b100 s
b100 x
b0 h
b0 n
b0 w
0%
1&
#15
1%
#20
0%
#25
1%
#30
0%
0&
#35
b10 0
b10 R
b10 Y
b10 S
b10 9
b10 ?
b10 D
b10 P
b1000 d
b1000 k
b1000 v
b10 1
b10 <
b10 L
b10 O
b1001 2
b1001 J
b1001 Z
b1001 K
b10 B
b10 @
b10 "
b10 '
b10 a
b10 u
b10 )
b10 M
b10 ]
b10 \
b1001 W
b1001 H
b100000000010010000000000000010 !
b100000000010010000000000000010 (
b100000000010010000000000000010 c
b100000000010010000000000000010 o
b10000 g
b10000 m
b10000 q
b1000 b
b1000 f
b1000 r
b1000 t
b1000 e
b1000 l
b1000 s
b1000 x
b100 h
b100 n
b100 w
1%
#40
0%
#45
1$
17
b0 0
b0 R
b0 Y
b0 S
b1010 2
b1010 J
b1010 Z
b1010 K
b0 9
b0 ?
b0 D
b0 P
1+
08
1:
b10100000010000000 d
b10100000010000000 k
b10100000010000000 v
b0 1
b0 <
b0 L
b0 O
b100100010 _
b10100000 B
b100000 @
b101000000100000 "
b101000000100000 '
b101000000100000 a
b101000000100000 u
b101000000100000 )
b101000000100000 M
b101000000100000 ]
b101000000100000 \
b1000 V
b1010 I
b0 ^
b1000010010101000000100000 !
b1000010010101000000100000 (
b1000010010101000000100000 c
b1000010010101000000100000 o
b10100000010001100 g
b10100000010001100 m
b10100000010001100 q
b1100 b
b1100 f
b1100 r
b1100 t
b1100 e
b1100 l
b1100 s
b1100 x
b1000 h
b1000 n
b1000 w
1%
#50
0%
#55
x+
18
x3
0*
14
0:
b0 d
b0 k
b0 v
b0 2
b0 J
b0 Z
b0 K
bx1x001000 _
b0 B
b0 @
b0 "
b0 '
b0 a
b0 u
b0 )
b0 M
b0 ]
b0 \
b1010 W
b0 V
b0 I
b1010 H
b101011 ^
b10101100000010100000000000000000 !
b10101100000010100000000000000000 (
b10101100000010100000000000000000 c
b10101100000010100000000000000000 o
b10000 g
b10000 m
b10000 q
b10000 b
b10000 f
b10000 r
b10000 t
b10000 e
b10000 l
b10000 s
b10000 x
b1100 h
b1100 n
b1100 w
1%
#60
0%
#65
1+
08
03
1*
04
b10000000 B
1:
b100100010 _
b0 W
b0 H
b0 ^
b0 !
b0 (
b0 c
b0 o
b10100 g
b10100 m
b10100 q
b10100 b
b10100 f
b10100 r
b10100 t
b10100 e
b10100 l
b10100 s
b10100 x
b10000 h
b10000 n
b10000 w
1%
#70
0%
#75
b11000 g
b11000 m
b11000 q
b11000 b
b11000 f
b11000 r
b11000 t
b11000 e
b11000 l
b11000 s
b11000 x
b10100 h
b10100 n
b10100 w
1%
#80
0%
#85
b11100 g
b11100 m
b11100 q
b11100 b
b11100 f
b11100 r
b11100 t
b11100 e
b11100 l
b11100 s
b11100 x
b11000 h
b11000 n
b11000 w
1%
#90
0%
#95
b100000 g
b100000 m
b100000 q
b100000 b
b100000 f
b100000 r
b100000 t
b100000 e
b100000 l
b100000 s
b100000 x
b11100 h
b11100 n
b11100 w
1%
#100
0%
#105
b100100 g
b100100 m
b100100 q
b100100 b
b100100 f
b100100 r
b100100 t
b100100 e
b100100 l
b100100 s
b100100 x
b100000 h
b100000 n
b100000 w
1%
#110
0%
#115
b101000 g
b101000 m
b101000 q
b101000 b
b101000 f
b101000 r
b101000 t
b101000 e
b101000 l
b101000 s
b101000 x
b100100 h
b100100 n
b100100 w
1%
#120
0%
#125
b101100 g
b101100 m
b101100 q
b101100 b
b101100 f
b101100 r
b101100 t
b101100 e
b101100 l
b101100 s
b101100 x
b101000 h
b101000 n
b101000 w
1%
#130
0%
