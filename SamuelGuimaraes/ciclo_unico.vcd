$date
	Sat Feb 08 22:25:33 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module Simulacao $end
$var wire 32 ! instrucao [31:0] $end
$var wire 32 " _fetchInstrucao [31:0] $end
$var wire 1 # _branch $end
$var wire 1 $ _ALUZero $end
$var reg 1 % clk $end
$var reg 1 & reset $end
$scope module ciclo_unico $end
$var wire 1 $ ALUZero $end
$var wire 32 ' _readData1 [31:0] $end
$var wire 32 ( _readData2 [31:0] $end
$var wire 1 # branch $end
$var wire 1 % clk $end
$var wire 32 ) fetchInstrucao [31:0] $end
$var wire 32 * instrucao [31:0] $end
$var wire 32 + _sign_extend [31:0] $end
$var wire 1 , _regWrite $end
$var wire 1 - _regDst $end
$var wire 32 . _readData [31:0] $end
$var wire 4 / _operacaoALU [3:0] $end
$var wire 32 0 _mux2 [31:0] $end
$var wire 32 1 _mux1 [31:0] $end
$var wire 5 2 _mux0 [4:0] $end
$var wire 1 3 _memtoReg $end
$var wire 1 4 _memWrite $end
$var wire 1 5 _memRead $end
$var wire 1 6 _branch $end
$var wire 1 7 _ALUZero $end
$var wire 1 8 _ALUSrc $end
$var wire 32 9 _ALUResult [31:0] $end
$var wire 1 : _ALUOp1 $end
$var wire 1 ; _ALUOp0 $end
$scope module alu $end
$var wire 32 < A [31:0] $end
$var wire 1 7 Zero $end
$var wire 32 = B [31:0] $end
$var wire 4 > ALUOperation [3:0] $end
$var reg 32 ? ALUResult [31:0] $end
$upscope $end
$scope module alu_control $end
$var wire 6 @ instrucao [5:0] $end
$var wire 4 A operacao [3:0] $end
$var wire 8 B auxiliarIn [7:0] $end
$var wire 1 : ALUOp1 $end
$var wire 1 ; ALUOp0 $end
$var reg 4 C auxiliarOut [3:0] $end
$upscope $end
$scope module data_memory $end
$var wire 32 D address [31:0] $end
$var wire 1 % clk $end
$var wire 32 E writeData [31:0] $end
$var wire 32 F readData [31:0] $end
$var wire 1 4 MemWrite $end
$var wire 1 5 MemRead $end
$var integer 32 G i [31:0] $end
$upscope $end
$scope module mux0 $end
$var wire 5 H A [4:0] $end
$var wire 5 I B [4:0] $end
$var wire 5 J Y [4:0] $end
$var wire 1 - seletor $end
$var reg 5 K auxiliarY [4:0] $end
$upscope $end
$scope module mux1 $end
$var wire 32 L A [31:0] $end
$var wire 32 M Y [31:0] $end
$var wire 1 8 seletor $end
$var wire 32 N B [31:0] $end
$var reg 32 O auxiliarY [31:0] $end
$upscope $end
$scope module mux2 $end
$var wire 32 P A [31:0] $end
$var wire 32 Q B [31:0] $end
$var wire 32 R Y [31:0] $end
$var wire 1 3 seletor $end
$var reg 32 S auxiliarY [31:0] $end
$upscope $end
$scope module sign_extend $end
$var wire 16 T in [15:0] $end
$var wire 32 U out [31:0] $end
$upscope $end
$scope module unidade_controle $end
$var wire 6 V operacao [5:0] $end
$var wire 1 , regWrite $end
$var wire 1 - regDst $end
$var wire 1 3 memtoReg $end
$var wire 1 4 memWrite $end
$var wire 1 5 memRead $end
$var wire 1 6 branch $end
$var wire 1 8 ALUSrc $end
$var wire 1 : ALUOp1 $end
$var wire 1 ; ALUOp0 $end
$var reg 9 W auxiliar [8:0] $end
$upscope $end
$upscope $end
$scope module fetch $end
$var wire 1 $ ALUZero $end
$var wire 1 X _seletor_mux3 $end
$var wire 1 # branch $end
$var wire 1 % clk $end
$var wire 32 Y fetchInstrucao [31:0] $end
$var wire 32 Z pc_incrementado [31:0] $end
$var wire 1 & reset $end
$var wire 32 [ instrucao [31:0] $end
$var wire 32 \ _shift_left_0 [31:0] $end
$var wire 32 ] _pc_add4 [31:0] $end
$var wire 32 ^ _mux3 [31:0] $end
$var wire 32 _ _ALU_result [31:0] $end
$var reg 32 ` pc [31:0] $end
$scope module alu_add $end
$var wire 4 a ALUOperation [3:0] $end
$var wire 1 b Zero $end
$var wire 32 c B [31:0] $end
$var wire 32 d A [31:0] $end
$var reg 32 e ALUResult [31:0] $end
$upscope $end
$scope module memoria $end
$var wire 32 f addr [31:0] $end
$var wire 32 g instrucao [31:0] $end
$var integer 32 h i [31:0] $end
$upscope $end
$scope module mux3 $end
$var wire 32 i B [31:0] $end
$var wire 1 X seletor $end
$var wire 32 j Y [31:0] $end
$var wire 32 k A [31:0] $end
$var reg 32 l auxiliarY [31:0] $end
$upscope $end
$scope module shift_left_0 $end
$var wire 32 m in [31:0] $end
$var wire 32 n out [31:0] $end
$upscope $end
$scope module somador $end
$var wire 32 o in [31:0] $end
$var wire 32 p out [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
bx p
bx o
bx00 n
bx m
bx l
bx k
bx j
bx i
b100000000 h
bx g
bx f
bx e
bx d
bx00 c
xb
b10 a
bx `
bx _
bx ^
bx ]
bx00 \
bx [
bx Z
bx Y
xX
bx W
bx V
bx U
bx T
b0 S
b0 R
b0 Q
b0 P
b0 O
bx N
b0 M
bz L
bx K
bx J
bx I
bx H
b100000000 G
b0 F
bz E
b0 D
bx C
bx B
bx A
bx @
b0 ?
bx >
b0 =
bz <
x;
x:
b0 9
x8
17
x6
x5
x4
x3
bx 2
b0 1
b0 0
bx /
b0 .
x-
x,
bx +
bx *
bx )
bz (
bz '
0&
0%
1$
x#
bx "
bx !
$end
#5
1%
#10
0b
x$
x7
b1000 _
b1000 e
b1000 i
bx 0
bx R
bx S
0X
bx 9
bx ?
bx D
bx P
b1 1
b1 =
b1 M
b1 O
0-
18
03
1,
05
04
0#
06
0:
0;
b10 /
b10 >
b10 A
b10 C
b100 \
b100 c
b100 n
b1000 2
b1000 J
b1000 K
b10100000 W
b1 B
b1 @
b1 "
b1 )
b1 Y
b1 m
b1 +
b1 N
b1 U
b1 T
b0 I
b1000 H
b1000 V
b100000000010000000000000000001 !
b100000000010000000000000000001 *
b100000000010000000000000000001 [
b100000000010000000000000000001 g
b100 Z
b100 ^
b100 j
b100 l
b100 ]
b100 d
b100 k
b100 p
b0 `
b0 f
b0 o
0%
1&
#15
1%
#20
0%
#25
1%
#30
0%
0&
#35
b1000 \
b1000 c
b1000 n
b10 1
b10 =
b10 M
b10 O
b1001 2
b1001 J
b1001 K
b10 B
b10 @
b10 "
b10 )
b10 Y
b10 m
b10 +
b10 N
b10 U
b10 T
b1001 H
b100000000010010000000000000010 !
b100000000010010000000000000010 *
b100000000010010000000000000010 [
b100000000010010000000000000010 g
b10000 _
b10000 e
b10000 i
b1000 Z
b1000 ^
b1000 j
b1000 l
b1000 ]
b1000 d
b1000 k
b1000 p
b100 `
b100 f
b100 o
1%
#40
0%
#45
b1010 2
b1010 J
b1010 K
1-
08
1:
b10100000010000000 \
b10100000010000000 c
b10100000010000000 n
bz 1
bz =
bz M
bz O
b100100010 W
b10100000 B
b100000 @
b101000000100000 "
b101000000100000 )
b101000000100000 Y
b101000000100000 m
b101000000100000 +
b101000000100000 N
b101000000100000 U
b101000000100000 T
b1010 I
b0 V
b1000010010101000000100000 !
b1000010010101000000100000 *
b1000010010101000000100000 [
b1000010010101000000100000 g
b10100000010001100 _
b10100000010001100 e
b10100000010001100 i
b1100 Z
b1100 ^
b1100 j
b1100 l
b1100 ]
b1100 d
b1100 k
b1100 p
b1000 `
b1000 f
b1000 o
1%
#50
0%
#55
b0 1
b0 =
b0 M
b0 O
b0 0
b0 R
b0 S
x-
18
x3
0,
14
0:
b0 \
b0 c
b0 n
b0 2
b0 J
b0 K
bx1x001000 W
b0 B
b0 @
b0 "
b0 )
b0 Y
b0 m
b0 +
b0 N
b0 U
b0 T
b0 I
b1010 H
b101011 V
b10101100000010100000000000000000 !
b10101100000010100000000000000000 *
b10101100000010100000000000000000 [
b10101100000010100000000000000000 g
b10000 _
b10000 e
b10000 i
b10000 Z
b10000 ^
b10000 j
b10000 l
b10000 ]
b10000 d
b10000 k
b10000 p
b1100 `
b1100 f
b1100 o
1%
#60
0%
#65
bz 1
bz =
bz M
bz O
bx 0
bx R
bx S
1-
08
03
1,
04
b10000000 B
1:
b100100010 W
b0 H
b0 V
b0 !
b0 *
b0 [
b0 g
b10100 _
b10100 e
b10100 i
b10100 Z
b10100 ^
b10100 j
b10100 l
b10100 ]
b10100 d
b10100 k
b10100 p
b10000 `
b10000 f
b10000 o
1%
#70
0%
#75
b11000 _
b11000 e
b11000 i
b11000 Z
b11000 ^
b11000 j
b11000 l
b11000 ]
b11000 d
b11000 k
b11000 p
b10100 `
b10100 f
b10100 o
1%
#80
0%
#85
b11100 _
b11100 e
b11100 i
b11100 Z
b11100 ^
b11100 j
b11100 l
b11100 ]
b11100 d
b11100 k
b11100 p
b11000 `
b11000 f
b11000 o
1%
#90
0%
#95
b100000 _
b100000 e
b100000 i
b100000 Z
b100000 ^
b100000 j
b100000 l
b100000 ]
b100000 d
b100000 k
b100000 p
b11100 `
b11100 f
b11100 o
1%
#100
0%
#105
b100100 _
b100100 e
b100100 i
b100100 Z
b100100 ^
b100100 j
b100100 l
b100100 ]
b100100 d
b100100 k
b100100 p
b100000 `
b100000 f
b100000 o
1%
#110
0%
#115
b101000 _
b101000 e
b101000 i
b101000 Z
b101000 ^
b101000 j
b101000 l
b101000 ]
b101000 d
b101000 k
b101000 p
b100100 `
b100100 f
b100100 o
1%
#120
0%
#125
b101100 _
b101100 e
b101100 i
b101100 Z
b101100 ^
b101100 j
b101100 l
b101100 ]
b101100 d
b101100 k
b101100 p
b101000 `
b101000 f
b101000 o
1%
#130
0%
