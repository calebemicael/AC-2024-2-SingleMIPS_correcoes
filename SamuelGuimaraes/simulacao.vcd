$date
	Fri Apr 11 11:39:56 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module Simulacao $end
$var wire 32 ! instrucao [31:0] $end
$var wire 1 " _jump $end
$var wire 32 # _fetchInstrucao [31:0] $end
$var wire 1 $ _branch $end
$var wire 1 % _ALUZero $end
$var reg 1 & clk $end
$var reg 1 ' reset $end
$scope module ciclo_unico $end
$var wire 1 % ALUZero $end
$var wire 1 $ branch $end
$var wire 1 & clk $end
$var wire 32 ( fetchInstrucao [31:0] $end
$var wire 1 " jump $end
$var wire 32 ) instrucao [31:0] $end
$var wire 32 * _sign_extend [31:0] $end
$var wire 1 + _regWrite $end
$var wire 1 , _regDst $end
$var wire 32 - _readData2 [31:0] $end
$var wire 32 . _readData1 [31:0] $end
$var wire 32 / _readData [31:0] $end
$var wire 4 0 _operacaoALU [3:0] $end
$var wire 32 1 _mux2 [31:0] $end
$var wire 32 2 _mux1 [31:0] $end
$var wire 5 3 _mux0 [4:0] $end
$var wire 1 4 _memtoReg $end
$var wire 1 5 _memWrite $end
$var wire 1 6 _memRead $end
$var wire 1 7 _jump $end
$var wire 1 8 _branch $end
$var wire 1 9 _ALUZero $end
$var wire 1 : _ALUSrc $end
$var wire 32 ; _ALUResult [31:0] $end
$var wire 1 < _ALUOp1 $end
$var wire 1 = _ALUOp0 $end
$scope module alu $end
$var wire 1 9 Zero $end
$var wire 32 > B [31:0] $end
$var wire 4 ? ALUOperation [3:0] $end
$var wire 32 @ A [31:0] $end
$var reg 32 A ALUResult [31:0] $end
$upscope $end
$scope module alu_control $end
$var wire 6 B instrucao [5:0] $end
$var wire 4 C operacao [3:0] $end
$var wire 8 D auxiliarIn [7:0] $end
$var wire 1 < ALUOp1 $end
$var wire 1 = ALUOp0 $end
$var reg 4 E auxiliarOut [3:0] $end
$upscope $end
$scope module data_memory $end
$var wire 32 F address [31:0] $end
$var wire 1 & clk $end
$var wire 32 G writeData [31:0] $end
$var wire 32 H readData [31:0] $end
$var wire 1 5 MemWrite $end
$var wire 1 6 MemRead $end
$var integer 32 I i [31:0] $end
$upscope $end
$scope module mux0 $end
$var wire 5 J A [4:0] $end
$var wire 5 K B [4:0] $end
$var wire 5 L Y [4:0] $end
$var wire 1 , seletor $end
$var reg 5 M auxiliarY [4:0] $end
$upscope $end
$scope module mux1 $end
$var wire 32 N Y [31:0] $end
$var wire 1 : seletor $end
$var wire 32 O B [31:0] $end
$var wire 32 P A [31:0] $end
$var reg 32 Q auxiliarY [31:0] $end
$upscope $end
$scope module mux2 $end
$var wire 32 R A [31:0] $end
$var wire 32 S B [31:0] $end
$var wire 32 T Y [31:0] $end
$var wire 1 4 seletor $end
$var reg 32 U auxiliarY [31:0] $end
$upscope $end
$scope module registradores $end
$var wire 32 V ReadData1 [31:0] $end
$var wire 32 W ReadData2 [31:0] $end
$var wire 5 X ReadRegister1 [4:0] $end
$var wire 5 Y ReadRegister2 [4:0] $end
$var wire 32 Z WriteData [31:0] $end
$var wire 5 [ WriteRegister [4:0] $end
$var wire 1 + RegWrite $end
$var integer 32 \ i [31:0] $end
$upscope $end
$scope module sign_extend $end
$var wire 16 ] in [15:0] $end
$var wire 32 ^ out [31:0] $end
$upscope $end
$scope module unidade_controle $end
$var wire 6 _ operacao [5:0] $end
$var wire 1 + regWrite $end
$var wire 1 , regDst $end
$var wire 1 4 memtoReg $end
$var wire 1 5 memWrite $end
$var wire 1 6 memRead $end
$var wire 1 7 jump $end
$var wire 1 8 branch $end
$var wire 1 : ALUSrc $end
$var wire 1 < ALUOp1 $end
$var wire 1 = ALUOp0 $end
$var reg 10 ` auxiliar [9:0] $end
$upscope $end
$upscope $end
$scope module fetch $end
$var wire 1 % ALUZero $end
$var wire 1 a _seletor_mux3 $end
$var wire 1 $ branch $end
$var wire 1 & clk $end
$var wire 32 b fetchInstrucao [31:0] $end
$var wire 1 " jump $end
$var wire 32 c pc_incrementado [31:0] $end
$var wire 1 ' reset $end
$var wire 32 d instrucao [31:0] $end
$var wire 32 e endereco_jump [31:0] $end
$var wire 28 f _shift_left_jump [27:0] $end
$var wire 32 g _shift_left_0 [31:0] $end
$var wire 32 h _pc_add4 [31:0] $end
$var wire 32 i _mux4 [31:0] $end
$var wire 32 j _mux3 [31:0] $end
$var wire 32 k _ALU_result [31:0] $end
$var reg 32 l pc [31:0] $end
$scope module alu_add $end
$var wire 4 m ALUOperation [3:0] $end
$var wire 1 n Zero $end
$var wire 32 o B [31:0] $end
$var wire 32 p A [31:0] $end
$var reg 32 q ALUResult [31:0] $end
$upscope $end
$scope module memoria $end
$var wire 32 r addr [31:0] $end
$var wire 32 s instrucao [31:0] $end
$upscope $end
$scope module mux3 $end
$var wire 32 t B [31:0] $end
$var wire 32 u Y [31:0] $end
$var wire 1 a seletor $end
$var wire 32 v A [31:0] $end
$var reg 32 w auxiliarY [31:0] $end
$upscope $end
$scope module mux4 $end
$var wire 32 x A [31:0] $end
$var wire 1 " seletor $end
$var wire 32 y Y [31:0] $end
$var wire 32 z B [31:0] $end
$var reg 32 { auxiliarY [31:0] $end
$upscope $end
$scope module shift_left_0 $end
$var wire 32 | in [31:0] $end
$var wire 32 } out [31:0] $end
$upscope $end
$scope module shift_left_26 $end
$var wire 26 ~ in [25:0] $end
$var wire 28 !" out [27:0] $end
$var wire 28 "" auxiliar [27:0] $end
$upscope $end
$scope module somador $end
$var wire 32 #" in [31:0] $end
$var wire 32 $" out [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
bx $"
bx #"
b0xxxxxxxxxxxxxxxxxxxxxxxxxx ""
bx00 !"
bx ~
bx00 }
bx |
bx {
bx z
bx y
bx x
bx w
bx v
bx u
bx t
bx s
bx r
bx q
bx p
bx00 o
xn
b10 m
bx l
bx k
bx j
bx i
bx h
bx00 g
bx00 f
bx00 e
bx d
bx c
bx b
xa
bx `
bx _
bx ^
bx ]
b100000 \
bx [
bx Z
bx Y
bx X
bx W
bx V
bx U
bx T
bx S
bx R
bx Q
bx P
bx O
bx N
bx M
bx L
bx K
bx J
b100000000 I
bx H
bx G
bx F
bx E
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
x=
x<
bx ;
x:
x9
x8
x7
x6
x5
x4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
bx -
x,
x+
bx *
bx )
bx (
0'
0&
x%
x$
bx #
x"
bx !
$end
#5
1&
#10
0n
b1000 k
b1000 q
b1000 t
b0 /
b0 H
b0 S
0a
0%
09
b1 1
b1 T
b1 Z
b1 U
0"
07
0,
1:
04
1+
06
05
0$
08
0<
0=
b1000000000000000000100 f
b1000000000000000000100 !"
b10 0
b10 ?
b10 C
b10 E
b100 g
b100 o
b100 }
b1 2
b1 >
b1 N
b1 Q
b1 ;
b1 A
b1 F
b1 R
b1000 3
b1000 L
b1000 [
b1000 M
b10100000 `
b10000000000000000001 ""
b10000000000000000001 ~
b1 D
b1 B
b1 #
b1 (
b1 b
b1 |
b1 *
b1 O
b1 ^
b1 ]
b1 -
b1 G
b1 P
b1 W
b1000 Y
b0 .
b0 @
b0 V
b0 X
b0 K
b1000 J
b1000 _
b100 c
b100 i
b100 y
b100 z
b100 {
b100000000010000000000000000001 !
b100000000010000000000000000001 )
b100000000010000000000000000001 d
b100000000010000000000000000001 s
b1000000000000000000100 e
b100 j
b100 u
b100 x
b100 w
b100 h
b100 p
b100 v
b100 $"
b0 l
b0 r
b0 #"
0&
1'
#15
1&
#20
0&
#25
1&
#30
0&
0'
#35
b10 1
b10 T
b10 Z
b10 U
b10 ;
b10 A
b10 F
b10 R
b1001000000000000001000 e
b1001000000000000001000 f
b1001000000000000001000 !"
b1000 g
b1000 o
b1000 }
b10 2
b10 >
b10 N
b10 Q
b1001 3
b1001 L
b1001 [
b1001 M
b10010000000000000010 ""
b10010000000000000010 ~
b10 D
b10 B
b10 #
b10 (
b10 b
b10 |
b10 *
b10 O
b10 ^
b10 ]
b10 -
b10 G
b10 P
b10 W
b1001 Y
b1001 J
b1000 c
b1000 i
b1000 y
b1000 z
b1000 {
b100000000010010000000000000010 !
b100000000010010000000000000010 )
b100000000010010000000000000010 d
b100000000010010000000000000010 s
b10000 k
b10000 q
b10000 t
b1000 j
b1000 u
b1000 x
b1000 w
b1000 h
b1000 p
b1000 v
b1000 $"
b100 l
b100 r
b100 #"
1&
#40
0&
#45
b11 -
b11 G
b11 P
b11 W
b11 1
b11 T
b11 Z
b11 U
b11 ;
b11 A
b11 F
b11 R
b1001000000000000001100 e
b1001000000000000001100 f
b1001000000000000001100 !"
b1100 g
b1100 o
b1100 }
b11 2
b11 >
b11 N
b11 Q
b10010000000000000011 ""
b10010000000000000011 ~
b11 D
b11 B
b11 #
b11 (
b11 b
b11 |
b11 *
b11 O
b11 ^
b11 ]
b1100 c
b1100 i
b1100 y
b1100 z
b1100 {
b100000000010010000000000000011 !
b100000000010010000000000000011 )
b100000000010010000000000000011 d
b100000000010010000000000000011 s
b11000 k
b11000 q
b11000 t
b1100 j
b1100 u
b1100 x
b1100 w
b1100 h
b1100 p
b1100 v
b1100 $"
b1000 l
b1000 r
b1000 #"
1&
#50
0&
#55
b101 1
b101 T
b101 Z
b101 U
b101 ;
b101 A
b101 F
b101 R
b1000000000000000010100 e
b1000000000000000010100 f
b1000000000000000010100 !"
b10100 g
b10100 o
b10100 }
b101 2
b101 >
b101 N
b101 Q
b1000 3
b1000 L
b1000 [
b1000 M
b10000000000000000101 ""
b10000000000000000101 ~
b101 D
b101 B
b101 #
b101 (
b101 b
b101 |
b101 *
b101 O
b101 ^
b101 ]
b101 -
b101 G
b101 P
b101 W
b1000 Y
b1000 J
b10000 c
b10000 i
b10000 y
b10000 z
b10000 {
b100000000010000000000000000101 !
b100000000010000000000000000101 )
b100000000010000000000000000101 d
b100000000010000000000000000101 s
b100100 k
b100100 q
b100100 t
b10000 j
b10000 u
b10000 x
b10000 w
b10000 h
b10000 p
b10000 v
b10000 $"
b1100 l
b1100 r
b1100 #"
1&
#60
0&
#65
b1010 1
b1010 T
b1010 Z
b1010 U
1,
0:
1<
b100001001010100000010000000 e
b100001001010100000010000000 f
b100001001010100000010000000 !"
b10100000010000000 g
b10100000010000000 o
b10100000010000000 }
b101 2
b101 >
b101 N
b101 Q
b1010 ;
b1010 A
b1010 F
b1010 R
b1010 3
b1010 L
b1010 [
b1010 M
b100100010 `
b1000010010101000000100000 ""
b1000010010101000000100000 ~
b10100000 D
b100000 B
b101000000100000 #
b101000000100000 (
b101000000100000 b
b101000000100000 |
b101000000100000 *
b101000000100000 O
b101000000100000 ^
b101000000100000 ]
b101 -
b101 G
b101 P
b101 W
b1001 Y
b101 .
b101 @
b101 V
b1000 X
b1010 K
b1001 J
b0 _
b10100 c
b10100 i
b10100 y
b10100 z
b10100 {
b1000010010101000000100000 !
b1000010010101000000100000 )
b1000010010101000000100000 d
b1000010010101000000100000 s
b10100000010010100 k
b10100000010010100 q
b10100000010010100 t
b10100 j
b10100 u
b10100 x
b10100 w
b10100 h
b10100 p
b10100 v
b10100 $"
b10000 l
b10000 r
b10000 #"
1&
#70
0&
#75
1%
19
b0 1
b0 T
b0 Z
b0 U
x,
1:
x4
0+
15
0<
b1010000000000000000000 e
b1010000000000000000000 f
b1010000000000000000000 !"
b0 g
b0 o
b0 }
b0 2
b0 >
b0 N
b0 Q
b0 ;
b0 A
b0 F
b0 R
b0 3
b0 L
b0 [
b0 M
b0x1x001000 `
b10100000000000000000 ""
b10100000000000000000 ~
b0 D
b0 B
b0 #
b0 (
b0 b
b0 |
b0 *
b0 O
b0 ^
b0 ]
b1010 -
b1010 G
b1010 P
b1010 W
b1010 Y
b0 .
b0 @
b0 V
b0 X
b0 K
b1010 J
b101011 _
b11000 c
b11000 i
b11000 y
b11000 z
b11000 {
b10101100000010100000000000000000 !
b10101100000010100000000000000000 )
b10101100000010100000000000000000 d
b10101100000010100000000000000000 s
b11000 k
b11000 q
b11000 t
b11000 j
b11000 u
b11000 x
b11000 w
b11000 h
b11000 p
b11000 v
b11000 $"
b10100 l
b10100 r
b10100 #"
1&
#80
0&
#85
xn
bx 3
bx L
bx [
bx M
x%
x9
bx 1
bx T
bx Z
bx U
0,
0:
04
05
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 e
bx00 f
bx00 !"
bx00 g
bx00 o
bx00 }
bx 2
bx >
bx N
bx Q
bx ;
bx A
bx F
bx R
b0 `
b0xxxxxxxxxxxxxxxxxxxxxxxxxx ""
bx ~
b0xxxxxx D
bx B
bx #
bx (
bx b
bx |
bx *
bx O
bx ^
bx ]
bx -
bx G
bx P
bx W
bx Y
bx .
bx @
bx V
bx X
bx K
bx J
bx _
b11100 c
b11100 i
b11100 y
b11100 z
b11100 {
bx !
bx )
bx d
bx s
bx k
bx q
bx t
b11100 j
b11100 u
b11100 x
b11100 w
b11100 h
b11100 p
b11100 v
b11100 $"
b11000 l
b11000 r
b11000 #"
1&
#90
0&
#95
b100000 c
b100000 i
b100000 y
b100000 z
b100000 {
b100000 j
b100000 u
b100000 x
b100000 w
b100000 h
b100000 p
b100000 v
b100000 $"
b11100 l
b11100 r
b11100 #"
1&
#100
0&
#105
b100100 c
b100100 i
b100100 y
b100100 z
b100100 {
b100100 j
b100100 u
b100100 x
b100100 w
b100100 h
b100100 p
b100100 v
b100100 $"
b100000 l
b100000 r
b100000 #"
1&
#110
0&
#115
b101000 c
b101000 i
b101000 y
b101000 z
b101000 {
b101000 j
b101000 u
b101000 x
b101000 w
b101000 h
b101000 p
b101000 v
b101000 $"
b100100 l
b100100 r
b100100 #"
1&
#120
0&
#125
b101100 c
b101100 i
b101100 y
b101100 z
b101100 {
b101100 j
b101100 u
b101100 x
b101100 w
b101100 h
b101100 p
b101100 v
b101100 $"
b101000 l
b101000 r
b101000 #"
1&
#130
0&
#135
b110000 c
b110000 i
b110000 y
b110000 z
b110000 {
b110000 j
b110000 u
b110000 x
b110000 w
b110000 h
b110000 p
b110000 v
b110000 $"
b101100 l
b101100 r
b101100 #"
1&
#140
0&
#145
b110100 c
b110100 i
b110100 y
b110100 z
b110100 {
b110100 j
b110100 u
b110100 x
b110100 w
b110100 h
b110100 p
b110100 v
b110100 $"
b110000 l
b110000 r
b110000 #"
1&
#150
0&
#155
b111000 c
b111000 i
b111000 y
b111000 z
b111000 {
b111000 j
b111000 u
b111000 x
b111000 w
b111000 h
b111000 p
b111000 v
b111000 $"
b110100 l
b110100 r
b110100 #"
1&
#160
0&
#165
b111100 c
b111100 i
b111100 y
b111100 z
b111100 {
b111100 j
b111100 u
b111100 x
b111100 w
b111100 h
b111100 p
b111100 v
b111100 $"
b111000 l
b111000 r
b111000 #"
1&
#170
0&
#175
b1000000 c
b1000000 i
b1000000 y
b1000000 z
b1000000 {
b1000000 j
b1000000 u
b1000000 x
b1000000 w
b1000000 h
b1000000 p
b1000000 v
b1000000 $"
b111100 l
b111100 r
b111100 #"
1&
#180
0&
#185
b1000100 c
b1000100 i
b1000100 y
b1000100 z
b1000100 {
b1000100 j
b1000100 u
b1000100 x
b1000100 w
b1000100 h
b1000100 p
b1000100 v
b1000100 $"
b1000000 l
b1000000 r
b1000000 #"
1&
#190
0&
#195
b1001000 c
b1001000 i
b1001000 y
b1001000 z
b1001000 {
b1001000 j
b1001000 u
b1001000 x
b1001000 w
b1001000 h
b1001000 p
b1001000 v
b1001000 $"
b1000100 l
b1000100 r
b1000100 #"
1&
#200
0&
#205
b1001100 c
b1001100 i
b1001100 y
b1001100 z
b1001100 {
b1001100 j
b1001100 u
b1001100 x
b1001100 w
b1001100 h
b1001100 p
b1001100 v
b1001100 $"
b1001000 l
b1001000 r
b1001000 #"
1&
#210
0&
#215
b1010000 c
b1010000 i
b1010000 y
b1010000 z
b1010000 {
b1010000 j
b1010000 u
b1010000 x
b1010000 w
b1010000 h
b1010000 p
b1010000 v
b1010000 $"
b1001100 l
b1001100 r
b1001100 #"
1&
#220
0&
#225
b1010100 c
b1010100 i
b1010100 y
b1010100 z
b1010100 {
b1010100 j
b1010100 u
b1010100 x
b1010100 w
b1010100 h
b1010100 p
b1010100 v
b1010100 $"
b1010000 l
b1010000 r
b1010000 #"
1&
#230
0&
